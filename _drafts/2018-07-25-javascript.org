#+begin_export html
---
layout: post
title: "JavaScript 学习"
date: 2018-07-25
categories: 程序设计
tags:
    - JavaScript
---
#+end_export

* JavaScript 概述

- HTML 中的脚本必须位于 =<script>= 与 =</script>= 标签之间。
- 脚本可被放置在 HTML 页面的 =<body>= 和 =<head>= 部分中。

* JavaScript：直接写入 HTML 输出流

#+BEGIN_SRC js
    document.write("<h1>这是一个标题</h1>");
    document.write("<p>这是一个段落。</p>");
#+END_SRC

只能在 HTML 输出中使用
document.write。如果在文档加载后使用该方法，会覆盖整个文档。

* JavaScript：对事件的反应

#+BEGIN_SRC js
    <button type="button" onclick="alert('欢迎!')">点我!</button>
#+END_SRC

=alert()= 函数在 JavaScript 中并不常用，但它对于代码测试非常方便。
=onclick= 事件只是众多事件之一。

* JavaScript：改变 HTML 内容

使用 JavaScript 来处理 HTML 内容是非常强大的功能。

#+BEGIN_SRC js
    x=document.getElementById("demo")  //查找元素
    x.innerHTML="Hello JavaScript";    //改变内容
#+END_SRC

* JavaScript：改变 HTML 样式

改变 HTML 元素的样式，属于改变 HTML 属性的变种。

#+BEGIN_SRC js
    x=document.getElementById("demo")  //找到元素
    x.style.color="#ff0000";           //改变样式
#+END_SRC

* JavaScript：验证输入

JavaScript 常用于验证用户的输入。

#+BEGIN_SRC js
    if isNaN(x) {alert("不是数字")};
#+END_SRC

* JavaScript 输出

JavaScript 可以通过不同的方式来输出数据：

- 使用 window.alert() 弹出警告框。
- 使用 document.write() 方法将内容写到 HTML 文档中。
- 使用 innerHTML 写入到 HTML 元素。
- 使用 console.log() 写入到浏览器的控制台。

* JavaScript 语法

* JavaScript 数据类型

JavaScript
有多种数据类型：字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）。

#+BEGIN_SRC js
    var length = 16;                                  // Number
    var points = x * 10;                              // Number
    var name   = "Johnson";                           // String
    var cars   = ["Saab", "Volvo", "BMW"];            // Array
    var person = {firstName:"John", lastName:"Doe"};  // Object

    var person;                 // 值为 undefined, 类型为 undefined
    var person = undefined;     // 值为 undefined, 类型为 undefined
    var person = null;          // 值为 null, 但类型为 Object

    // 当您声明新变量时，可以使用关键词 "new" 来声明其类型：
    var carname = new String;
    var x       = new Number;
    var y       = new Boolean;
    var cars    = new Array;
    var person  = new Object;

    // Function 函数
    function myFunction(a, b) { return a * b;}

    // 对象方法
    var person = {
        firstName: "John",
        lastName : "Doe",
        id : 5566,
        fullName : function() { return this.firstName + " " + this.lastName; }
    };

    // typeof 操作符
    // 你可以使用 typeof 操作符来检测变量的数据类型。
    // 在 JavaScript 中，数组是一种特殊的对象类型。 因此 typeof [1,2,3,4] 返回 object。
    // 用 typeof 检测 null 返回是 object。
    typeof "John"                 // 返回 string
    typeof 3.14                   // 返回 number
    typeof NaN                    // 返回 number
    typeof false                  // 返回 boolean
    typeof [1,2,3,4]              // 返回 object
    typeof {name:'John', age:34}  // 返回 object
    typeof new Date()             // 返回 object
    typeof function () {}         // 返回 function
    typeof myCar                  // 返回 undefined (如果 myCar 没有声明)
    typeof null                   // 返回 object
    // 在 JavaScript 中, null 用于对象, undefined 用于变量，属性和方法。
    // 对象只有被定义才有可能为 null，否则为 undefined。
    // 如果我们想测试对象是否存在，在对象还没定义时将会抛出一个错误。
    // 错误的使用方式：
    if (myObj !== null && typeof myObj !== "undefined")
    // 正确的方式是我们需要先使用 typeof 来检测对象是否已定义：
    if (typeof myObj !== "undefined" && myObj !== null)
#+END_SRC

* JavaScript 正则表达式

* 语法

=/正则表达式主体/修饰符(可选)= 其中修饰符是可选的。实例如下：

- =/runoob/i= 是一个正则表达式。
- =runoob= 是一个正则表达式主体 (用于检索)。
- =i= 是一个修饰符 (搜索不区分大小写)。

* 正则表达式修饰符

- =i= 执行对大小写不敏感的匹配。
- =g= 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。
- =m= 执行多行匹配。

* 正则表达式模式

方括号用于查找某个范围内的字符：

#+BEGIN_VERSE
  表达式 | 描述 | | |
  ------ | --- | | |
  [abc] | 查找方括号之间的任何字符。 | | |
  [0-9] | 查找任何从 0 至 9 的数字。 | | |
  (x | y) | 查找任何以 | 分隔的选项。 |
#+END_VERSE

元字符是拥有特殊含义的字符：

| 表达式                    | 描述                                          |
|---------------------------+-----------------------------------------------|
| \d     | 查找数字。       |                                               |
| \s                        | 查找空白字符。                                |
| \b     | 匹配单词边界。   |                                               |
| \uxxxx                    | 查找以十六进制数 xxxx 规定的 Unicode 字符。   |

量词:

| 量词   | 描述                                  |
|--------+---------------------------------------|
| =n+=   | 匹配任何包含至少一个 n 的字符串。     |
| =n*=   | 匹配任何包含零个或多个 n 的字符串。   |
| =n?=   | 匹配任何包含零个或一个 n 的字符串。   |

* 使用字符串方法

在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和
replace()。

- search() 方法
  用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。
- replace() 方法
  用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。

#+BEGIN_SRC js
    // 使用正则表达式搜索 "Runoob" 字符串，且不区分大小写：
    // search() 输出结果为：6
    var str = "Visit Runoob!";
    var n = str.search(/runoob/i);
    var n = str.replace(/runoob/i, "test");
#+END_SRC

* 使用 RegExp 对象

在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。

* 使用 test()

test()
方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回
true，否则返回 false。

#+BEGIN_SRC js
    // 以下实例用于搜索字符串中的字符 "e"：
    // 字符串中含有 "e"，所以该实例输出为：true
    var patt = /e/;
    patt.test("The best things in life are free!");
    // 可以不用设置正则表达式的变量，以上两行代码可以合并为一行：
    /e/.test("The best things in life are free!")
#+END_SRC

* 使用 exec()

exec()
方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为
null。

#+BEGIN_SRC js
    // 以下实例用于搜索字符串中的字母 "e":
    // 字符串中含有 "e"，所以该实例输出为: e
    /e/.exec("The best things in life are free!");
#+END_SRC

* JavaScript 异常

- try 语句允许我们定义在执行时进行错误测试的代码块。
- catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。
- JavaScript 语句 try 和 catch 是成对出现的。
- throw 语句允许我们创建自定义错误。

#+BEGIN_SRC js
    function myFunction() {
        var message, x;
        message = document.getElementById("message");
        message.innerHTML = "";
        x = document.getElementById("demo").value;
        try {
            if(x == "")  throw "值为空";
            if(isNaN(x)) throw "不是数字";
            x = Number(x);
            if(x < 5)    throw "太小";
            if(x > 10)   throw "太大";
        }
        catch(err) {
            message.innerHTML = "错误: " + err;
        }
#+END_SRC

* JavaScript 变量提升

- JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。
- JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。
- JavaScript 只有声明的变量会提升，初始化的不会。

* JavaScript JSON

* JSON 语法规则

- 数据为 键/值 对。
- 数据由逗号分隔。
- 大括号保存对象
- 方括号保存数组

#+BEGIN_SRC js
    var text = '{ "sites" : [' +
        '{ "name":"Runoob" , "url":"www.runoob.com" },' +
        '{ "name":"Google" , "url":"www.google.com" },' +
        '{ "name":"Taobao" , "url":"www.taobao.com" } ]}';

    obj = JSON.parse(text);
    // 内容为：Google www.google.com
    document.getElementById("demo").innerHTML = obj.sites[1].name + " " + obj.sites[1].url;
#+END_SRC

* 相关函数

| 函数               | 描述                                             |
|--------------------+--------------------------------------------------|
| JSON.parse()       | 用于将一个 JSON 字符串转换为 JavaScript 对象。   |
| JSON.stringify()   | 用于将 JavaScript 值转换为 JSON 字符串。         |

* JavaScript void

我们经常会使用到 javascript:void(0) 这样的代码，那么在 JavaScript 中
javascript:void(0) 代表的是什么意思呢？

javascript:void(0) 中最关键的是 void 关键字，void 是 JavaScript
中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。语法格式如下：

#+BEGIN_EXAMPLE
    <!doctype html>
    <html>
    <head>
    <meta charset="utf-8">
    <script type="text/javascript">
    <!--
    void func()
    javascript:void func()
    // 或者
    void(func())
    javascript:void(func())
    //-->
    </script>
    </head>
    <body>
    <a href="javascript:void(0)">单击此处什么也不会发生</a>
    <a href="javascript:void(alert('Warning!'))">点我!</a>
    </body>
    </html>
#+END_EXAMPLE

* href="#"与 href="javascript:void(0)"的区别

- =#= 包含了一个位置信息，默认的锚是 =#top= 也就是网页的上端。
- =javascript:void(0)=, 仅仅表示一个死链接。

在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。

如果你要定义一个死链接请使用 javascript:void(0) 。

* JavaScript 高级教程

* JavaScript 对象

JavaScript 中的所有事物都是对象：字符串、数值、数组、函数...
此外，JavaScript 允许自定义对象。

* 所有事物都是对象

JavaScript 提供多个内建对象，比如 String、Date、Array 等等。
对象只是带有属性和方法的特殊数据类型。

- 布尔型可以是一个对象。
- 数字型可以是一个对象。
- 字符串也可以是一个对象
- 日期是一个对象
- 数学和正则表达式也是对象
- 数组是一个对象
- 甚至函数也可以是对象

* JavaScript 对象

对象只是一种特殊的数据。对象拥有属性和方法。

* 访问对象的属性

属性是与对象相关的值。 访问对象属性的语法是：

#+BEGIN_SRC js
    objectName.propertyName
    // 这个例子使用了 String 对象的 length 属性来获得字符串的长度：
    var message="Hello World!";
    var x=message.length;
    // 在以上代码执行后，x 的值将是：12
#+END_SRC

* 访问对象的方法

方法是能够在对象上执行的动作。 您可以通过以下语法来调用方法：

#+BEGIN_SRC js
    objectName.methodName()
    // 这个例子使用了 String 对象的 toUpperCase() 方法来将文本转换为大写：
    var message="Hello world!";
    var x=message.toUpperCase();
    // 在以上代码执行后，x 的值将是：HELLO WORLD!
#+END_SRC

* 创建 JavaScript 对象

通过 JavaScript，您能够定义并创建自己的对象。
创建新对象有两种不同的方法：

- 定义并创建对象的实例
- 使用函数来定义对象，然后创建新的对象实例

* 创建直接的实例

这个例子创建了对象的一个新实例，并向其添加了四个属性：

#+BEGIN_SRC js
    person=new Object();
    person.firstname="John";
    person.lastname="Doe";
    person.age=50;
    person.eyecolor="blue";
#+END_SRC

替代语法（使用对象 literals）：

#+BEGIN_SRC js
    person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"};
#+END_SRC

* 使用对象构造器

本例使用函数来构造对象：

#+BEGIN_SRC js
    function person(firstname,lastname,age,eyecolor)
    {
        this.firstname=firstname;
        this.lastname=lastname;
        this.age=age;
        this.eyecolor=eyecolor;
    }
#+END_SRC

在 JavaScript 中，this
通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）

* 创建 JavaScript 对象实例

一旦您有了对象构造器，就可以创建新的对象实例，就像这样：

#+BEGIN_SRC js
    var myFather=new person("John","Doe",50,"blue");
    var myMother=new person("Sally","Rally",48,"green");
#+END_SRC

* 把属性添加到 JavaScript 对象

您可以通过为对象赋值，向已有对象添加新属性： 假设 personObj 已存在 -
您可以为其添加这些新属性：firstname、lastname、age 以及 eyecolor：

#+BEGIN_SRC js
    person.firstname="John";
    person.lastname="Doe";
    person.age=30;
    person.eyecolor="blue";

    x=person.firstname;
    // 在以上代码执行后，x 的值将是：John
#+END_SRC

* 把方法添加到 JavaScript 对象

方法只不过是附加在对象上的函数。 在构造器函数内部定义对象的方法：

#+BEGIN_SRC js
    function person(firstname,lastname,age,eyecolor)
    {
        this.firstname=firstname;
        this.lastname=lastname;
        this.age=age;
        this.eyecolor=eyecolor;

        this.changeName=changeName;
        function changeName(name)
        {
            this.lastname=name;
        }

    // changeName() 函数 name 的值赋给 person 的 lastname 属性。
    // 现在您可以试一下：
    myMother.changeName("Doe");
    }
#+END_SRC

* JavaScript 类

- JavaScript 是面向对象的语言，但 JavaScript 不使用类。
- 在 JavaScript
  中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）。
- JavaScript 基于 prototype，而不是基于类的。

* JavaScript for...in 循环

JavaScript for...in 语句循环遍历对象的属性。

#+BEGIN_SRC js
    for (variable in object)
    {
        执行的代码……
    }
#+END_SRC

注意：for...in 循环中的代码块将针对每个属性执行一次。

循环遍历对象的属性：

#+BEGIN_SRC js
    var person={fname:"John",lname:"Doe",age:25};

    for (x in person)
    {
        txt=txt + person[x];
    }
#+END_SRC

* JavaScript HTML DOM

当网页被加载时，浏览器会创建页面的文档对象模型（Document Object
Model）。HTML DOM 模型被构造为对象的树。
通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。

#+CAPTION: HTML DOM 树模型
[[/img/pic_htmltree.gif]]

- JavaScript 能够改变页面中的所有 HTML 元素
- JavaScript 能够改变页面中的所有 HTML 属性
- JavaScript 能够改变页面中的所有 CSS 样式
- JavaScript 能够对页面中的所有事件做出反应

* 查找 HTML

通常，通过 JavaScript，您需要操作 HTML
元素。为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事：

- 通过 id 找到 HTML 元素
- 通过标签名找到 HTML 元素
- 通过类名找到 HTML 元素

* 通过 id 查找 HTML 元素

在 DOM 中查找 HTML 元素的最简单的方法，是通过使用元素的 id。

#+BEGIN_SRC js
    // 本例查找 id="intro" 元素：
    // 如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。
    // 如果未找到该元素，则 x 将包含 null。
    var x=document.getElementById("intro");
#+END_SRC

* 通过标签名查找 HTML 元素

本例查找 id="main" 的元素，然后查找 id="main" 元素中的所有 =<p>= 元素：

#+BEGIN_SRC js
    var x=document.getElementById("main");
    var y=x.getElementsByTagName("p");
#+END_SRC

* 通过类名找到 HTML 元素

本例通过 getElementsByClassName 函数来查找 class="intro" 的元素：

#+BEGIN_SRC js
    var x=document.getElementsByClassName("intro");
#+END_SRC

* 改变 HTML

* 改变 HTML 输出流

JavaScript 能够创建动态的 HTML 内容：

今天的日期是：Fri Jul 27 2018 11:03:46 GMT+0800 (中国标准时间) 在
JavaScript 中，document.write() 可用于直接向 HTML 输出流写内容。

#+BEGIN_EXAMPLE
    <!DOCTYPE html>
    <html>
    <body>

    <script>
    document.write(Date());
    </script>

    </body>
    </html>
#+END_EXAMPLE

绝对不要在文档(DOM)加载完成之后使用 document.write()。这会覆盖该文档。

* 改变 HTML 内容

修改 HTML 内容的最简单的方法是使用 innerHTML 属性。 如需改变 HTML
元素的内容，请使用这个语法：

document.getElementById(id).innerHTML=新的 HTML 本例改变了 =<p>=
元素的内容：

#+BEGIN_EXAMPLE
    <html>
    <body>

    <p id="p1">Hello World!</p>

    <script>
    document.getElementById("p1").innerHTML="新文本!";
    </script>

    </body>
    </html>
#+END_EXAMPLE

本例改变了 =<h1>= 元素的内容：

* 改变 HTML 属性

如需改变 HTML 元素的属性，请使用这个语法：

document.getElementById(id).attribute=新属性值 本例改变了 =<img>= 元素的
src 属性：

#+BEGIN_EXAMPLE
    <!DOCTYPE html>
    <html>
    <body>

    <img id="image" src="smiley.gif">

    <script>
    document.getElementById("image").src="landscape.jpg";
    </script>

    </body>
    </html>
#+END_EXAMPLE

上面的 HTML 文档含有 =id="image"= 的 =<img>= 元素 我们使用 HTML DOM
来获得 =id="image"= 的元素 JavaScript 更改此元素的属性（把 "smiley.gif"
改为 "landscape.jpg"）

* 改变 CSS

HTML DOM 允许 JavaScript 改变 HTML 元素的样式。

* 改变 HTML 样式

如需改变 HTML 元素的样式，请使用这个语法：

#+BEGIN_SRC js
    document.getElementById(id).style.property=新样式
#+END_SRC

下面的例子会改变 =<p>= 元素的样式：

#+BEGIN_EXAMPLE
    <!DOCTYPE html>
    <html>
    <head>
    <meta charset="utf-8">
    <title>菜鸟教程(runoob.com)</title>
    </head>
    <body>

    <p id="p1">Hello World!</p>
    <p id="p2">Hello World!</p>
    <script>
    document.getElementById("p2").style.color="blue";
    document.getElementById("p2").style.fontFamily="Arial";
    document.getElementById("p2").style.fontSize="larger";
    </script>
    <p>以上段落通过脚本修改。</p>

    </body>
    </html>
#+END_EXAMPLE

* 使用事件

HTML DOM 允许我们通过触发事件来执行代码。

比如以下事件：

- 元素被点击。
- 页面加载完成。
- 输入框被修改。
- ......

在接下来的章节，你会学到更多关于事件的知识。

本例改变了 id="id1" 的 HTML 元素的样式，当用户点击按钮时：

#+BEGIN_EXAMPLE
    <!DOCTYPE html>
    <html>
    <body>

    <h1 id="id1">我的标题 1</h1>
    <button type="button" onclick="document.getElementById('id1').style.color='red'">
    点我!</button>

    </body>
    </html>
#+END_EXAMPLE

* DOM 事件

HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。
我们可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。

如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript
代码：

#+BEGIN_SRC js
    onclick=JavaScript
#+END_SRC

HTML 事件的例子：

- 当用户点击鼠标时
- 当网页已加载时
- 当图像已加载时
- 当鼠标移动到元素上时
- 当输入字段被改变时
- 当提交 HTML 表单时
- 当用户触发按键时
- ...

在本例中，当用户在 =<h1>= 元素上点击时，会改变其内容：

#+BEGIN_EXAMPLE
    <!DOCTYPE html>
    <html>
    <body>
    <h1 onclick="this.innerHTML='Ooops!'">点击文本!</h1>
    </body>
    </html>
#+END_EXAMPLE

* 使用 HTML DOM 来分配事件

HTML DOM 允许您使用 JavaScript 来向 HTML 元素分配事件： 向 button
元素分配 onclick 事件：

#+BEGIN_SRC js
    <script>
    document.getElementById("myBtn").onclick=function(){displayDate()};
    </script>
#+END_SRC

在上面的例子中，名为 displayDate 的函数被分配给 id="myBtn" 的 HTML
元素。 按钮点击时 Javascript 函数将会被执行。

* onload 和 onunload 事件

- onload 和 onunload 事件会在用户进入或离开页面时被触发。
- onload
  事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。
- onload 和 onunload 事件可用于处理 cookie。

#+BEGIN_EXAMPLE
    <body onload="checkCookies()">
#+END_EXAMPLE

* onchange 事件

onchange 事件常结合对输入字段的验证来使用。 下面是一个如何使用 onchange
的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。

#+BEGIN_EXAMPLE
    <input type="text" id="fname" onchange="upperCase()">
#+END_EXAMPLE

* onmouseover 和 onmouseout 事件

onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML
元素上方或移出元素时触发函数。

* onmousedown、onmouseup 以及 onclick 事件

onmousedown, onmouseup 以及 onclick
构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown
事件，当释放鼠标按钮时，会触发 onmouseup
事件，最后，当完成鼠标点击时，会触发 onclick 事件。

* DOM EventListener

* addEventListener() 方法

在用户点击按钮时触发监听事件：

#+BEGIN_SRC js
    document.getElementById("myBtn").addEventListener("click", displayDate);
#+END_SRC

- addEventListener() 方法用于向指定元素添加事件句柄。
- addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。
- 你可以向一个元素添加多个事件句柄。
- 你可以向同个元素添加多个同类型的事件句柄，如：两个 "click" 事件。
- 你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如：window
  对象。
- addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。
- 当你使用 addEventListener() 方法时, JavaScript 从 HTML
  标记中分离开来，可读性更强， 在没有控制 HTML
  标记时也可以添加事件监听。
- 你可以使用 removeEventListener() 方法来移除事件的监听。

* 语法

#+BEGIN_SRC js
    element.addEventListener(event, function, useCapture);
#+END_SRC

- 第一个参数是事件的类型 (如 "click" 或 "mousedown").
- 第二个参数是事件触发后调用的函数。
- 第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。

注意:不要使用 "on" 前缀。 例如，使用 "click" ,而不是使用 "onclick"。

* 向原元素添加事件句柄

当用户点击元素时弹出 "Hello World!" :

#+BEGIN_SRC js
    element.addEventListener("click", function(){ alert("Hello World!"); });
#+END_SRC

你可以使用函数名，来引用外部函数: 当用户点击元素时弹出 "Hello World!" :

#+BEGIN_SRC js
    element.addEventListener("click", myFunction);

    function myFunction() {
        alert ("Hello World!");
    }
#+END_SRC

* 向同一个元素中添加多个事件句柄

addEventListener()
方法允许向同一个元素添加多个事件，且不会覆盖已存在的事件：

#+BEGIN_SRC js
    element.addEventListener("click", myFunction);
    element.addEventListener("click", mySecondFunction);
#+END_SRC

你可以向同个元素添加不同类型的事件：

#+BEGIN_SRC js
    element.addEventListener("mouseover", myFunction);
    element.addEventListener("click", mySecondFunction);
    element.addEventListener("mouseout", myThirdFunction);
#+END_SRC

* 向 Window 对象添加事件句柄

addEventListener() 方法允许你在 HTML DOM 对象添加事件监听，HTML DOM
对象如：HTML 元素, HTML 文档, window 对象。或者其他支出的事件对象如:
xmlHttpRequest 对象。

当用户重置窗口大小时添加事件监听：

#+BEGIN_SRC js
    window.addEventListener("resize", function(){
        document.getElementById("demo").innerHTML = sometext;
    });
#+END_SRC

* 传递参数

当传递参数值时，使用"匿名函数"调用带参数的函数：

#+BEGIN_SRC js
    element.addEventListener("click", function(){ myFunction(p1, p2); });
#+END_SRC

* 事件冒泡或事件捕获？

事件传递有两种方式：冒泡与捕获。

- 事件传递定义了元素事件触发的顺序。如果你将 =<p>= 元素插入到 =<div>=
  元素中，用户点击 =<p>= 元素, 哪个元素的 "click" 事件先被触发呢？
- 在冒泡中，内部元素的事件会先被触发，然后再触发外部元素，即： =<p>=
  元素的点击事件先触发，然后会触发 =<div>= 元素的点击事件。
- 在捕获中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即：
  =<div>= 元素的点击事件先触发，然后再触发 =<p>= 元素的点击事件。

addEventListener() 方法可以指定 "useCapture" 参数来设置传递类型：

#+BEGIN_SRC js
    addEventListener(event, function, useCapture);
#+END_SRC

默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。

#+BEGIN_SRC js
    document.getElementById("myDiv").addEventListener("click", myFunction, true);
#+END_SRC

* removeEventListener() 方法

removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄:

#+BEGIN_SRC js
    element.removeEventListener("mousemove", myFunction);
#+END_SRC

* 浏览器支持

表格中的数字表示支持该方法的第一个浏览器的版本号。

注意：IE 8 及更早 IE 版本，Opera 7.0 及其更早版本不支持
addEventListener() 和 removeEventListener()
方法。但是，对于这类浏览器版本可以使用 detachEvent() 方法来移除事件句柄:

#+BEGIN_SRC js
    element.attachEvent(event, function);
    element.detachEvent(event, function);
#+END_SRC

跨浏览器解决方法:

#+BEGIN_SRC js
    var x = document.getElementById("myBtn");
    if (x.addEventListener) {                    // 所有主流浏览器，除了 IE 8 及更早版本
        x.addEventListener("click", myFunction);
    } else if (x.attachEvent) {                  // IE 8 及更早版本
        x.attachEvent("onclick", myFunction);
    }
#+END_SRC

* DOM 元素(节点)

本章节介绍如何向文档中添加和移除元素(节点)。

创建新的 HTML 元素 (节点) - appendChild() 要创建新的 HTML 元素
(节点)需要先创建一个元素，然后在已存在的元素中添加它。

#+BEGIN_EXAMPLE
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另外一个段落。</p>
    </div>

    <script>
    var para = document.createElement("p");
    var node = document.createTextNode("这是一个新的段落。");
    para.appendChild(node);

    var element = document.getElementById("div1");
    element.appendChild(para);
    </script>
#+END_EXAMPLE

* 创建新的 HTML 元素 (节点) - insertBefore()

以上的实例我们使用了 appendChild() 方法，它用于添加新元素到尾部。
如果我们需要将新元素添加到开始位置，可以使用 insertBefore() 方法:

#+BEGIN_EXAMPLE
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另外一个段落。</p>
    </div>

    <script>
    var para = document.createElement("p");
    var node = document.createTextNode("这是一个新的段落。");
    para.appendChild(node);

    var element = document.getElementById("div1");
    var child = document.getElementById("p1");
    element.insertBefore(para, child);
    </script>
#+END_EXAMPLE

* 移除已存在的元素

要移除一个元素，你需要知道该元素的父元素。

#+BEGIN_EXAMPLE
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另外一个段落。</p>
    </div>

    <script>
    var parent = document.getElementById("div1");
    var child = document.getElementById("p1");
    parent.removeChild(child);
    </script>
#+END_EXAMPLE

注意：早期的 Internet Explorer 浏览器不支持 node.remove() 方法。

如果能够在不引用父元素的情况下删除某个元素，就太好了。 不过很遗憾。DOM
需要清楚您需要删除的元素，以及它的父元素。

以下代码是已知要查找的子元素，然后查找其父元素，再删除这个子元素（删除节点必须知道父节点）：

#+BEGIN_EXAMPLE
    var child = document.getElementById("p1");
    child.parentNode.removeChild(child);
#+END_EXAMPLE

替换 HTML 元素 - replaceChild()。 我们可以使用 replaceChild() 方法来替换
HTML DOM 中的元素。

#+BEGIN_EXAMPLE
    <div id="div1">
    <p id="p1">这是一个段落。</p>
    <p id="p2">这是另外一个段落。</p>
    </div>

    <script>
    var para = document.createElement("p");
    var node = document.createTextNode("这是一个新的段落。");
    para.appendChild(node);

    var parent = document.getElementById("div1");
    var child = document.getElementById("p1");
    parent.replaceChild(para, child);
    </script>
#+END_EXAMPLE

* DOM 集合(Collection)

本章节介绍如何向文档中添加和移除元素(节点)。

* HTMLCollection 对象

getElementsByTagName() 方法返回 HTMLCollection 对象。HTMLCollection
对象类似 HTML 元素的一个数组。

以下代码获取文档所有的 =<p>= 元素：

#+BEGIN_EXAMPLE
    var x = document.getElementsByTagName("p");
#+END_EXAMPLE

集合中的元素可以通过索引(以 0 为起始位置)来访问。 访问第二个 =<p>=
元素可以是以下代码:

#+BEGIN_SRC js
    y = x[1];
#+END_SRC

* HTMLCollection 对象 length 属性

HTMLCollection 对象的 length 属性定义了集合中元素的数量。

#+BEGIN_SRC js
    var myCollection = document.getElementsByTagName("p");
    document.getElementById("demo").innerHTML = myCollection.length;
#+END_SRC

修改所有 =<p>= 元素的背景颜色:

#+BEGIN_SRC js
    var myCollection = document.getElementsByTagName("p");
    var i;
    for (i = 0; i < myCollection.length; i++) {
        myCollection[i].style.backgroundColor = "red";
    }
#+END_SRC

*注意：HTMLCollection 不是一个数组！* HTMLCollection
看起来可能是一个数组，但其实不是。
你可以像数组一样，使用索引来获取元素。HTMLCollection
无法使用数组的方法：valueOf(), pop(), push(), 或 join() 。

* DOM 节点列表

- NodeList 对象是一个从文档中获取的节点列表 (集合) 。
- NodeList 对象类似 HTMLCollection 对象。
- 一些旧版本浏览器中的方法（如：getElementsByClassName()）返回的是
  NodeList 对象，而不是 HTMLCollection 对象。
- 所有浏览器的 childNodes 属性返回的是 NodeList 对象。
- 大部分浏览器的 querySelectorAll() 返回 NodeList 对象。

以下代码选取了文档中所有的 =<p>= 节点：

#+BEGIN_SRC js
    var myNodeList = document.querySelectorAll("p");
#+END_SRC

NodeList 中的元素可以通过索引(以 0 为起始位置)来访问。 访问第二个 =<p>=
元素可以是以下代码:

#+BEGIN_SRC js
    y = myNodeList[1];
#+END_SRC

* NodeList 对象 length 属性

NodeList 对象 length 属性定义了节点列表中元素的数量。

#+BEGIN_SRC js
    var myNodelist = document.querySelectorAll("p");
    document.getElementById("demo").innerHTML = myNodelist.length;
#+END_SRC

修改节点列表中所有 =<p>= 元素的背景颜色:

#+BEGIN_SRC js
    var myNodelist = document.querySelectorAll("p");
    var i;
    for (i = 0; i < myNodelist.length; i++) {
        myNodelist[i].style.backgroundColor = "red";
    }
#+END_SRC

* NodeList 与 HTMLCollection 有很多类似的地方。

- NodeList 与 HTMLCollection 都与数组对象有点类似，可以使用索引 (0, 1,
  2, 3, 4, ...) 来获取元素。
- NodeList 与 HTMLCollection 都有 length 属性。
- HTMLCollection 元素可以通过 name，id 或索引来获取。

* HTMLCollection 与 NodeList 的区别

- HTMLCollection 是 HTML 元素的集合。
- NodeList 是一个文档节点的集合。
- NodeList 只能通过索引来获取。
- 只有 NodeList 对象有包含属性节点和文本节点。

* 节点列表不是一个数组！

- 节点列表看起来可能是一个数组，但其实不是。
- 你可以像数组一样，使用索引来获取元素。
- 节点列表无法使用数组的方法：valueOf(), pop(), push(), 或 join() 。

* JavaScript 浏览器对象模型

* JavaScript Window

浏览器对象模型 (BOM) 使 JavaScript 有能力与浏览器"对话"。

* 浏览器对象模型 (BOM)

浏览器对象模型（Browser Object Model (BOM)）尚无正式标准。
由于现代浏览器已经（几乎）实现了 JavaScript
交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。

* Window 对象

- 所有浏览器都支持 window 对象。它表示浏览器窗口。
- 所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。
- 全局变量是 window 对象的属性。
- 全局函数是 window 对象的方法。

甚至 HTML DOM 的 document 也是 window 对象的属性之一：

#+BEGIN_SRC js
    window.document.getElementById("header");
    // 与此相同：
    document.getElementById("header");
#+END_SRC

* Window 尺寸

有三种方法能够确定浏览器窗口的尺寸。

对于 Internet Explorer、Chrome、Firefox、Opera 以及 Safari：

#+BEGIN_SRC js
    window.innerHeight - 浏览器窗口的内部高度(包括滚动条)
    window.innerWidth - 浏览器窗口的内部宽度(包括滚动条)
#+END_SRC

对于 Internet Explorer 8、7、6、5：

#+BEGIN_SRC js
    document.documentElement.clientHeight
    document.documentElement.clientWidth
#+END_SRC

或者

#+BEGIN_SRC js
    document.body.clientHeight
    document.body.clientWidth
#+END_SRC

*实用的 JavaScript 方案（涵盖所有浏览器）：*

#+BEGIN_SRC js
    var w=window.innerWidth
        || document.documentElement.clientWidth
        || document.body.clientWidth;

    var h=window.innerHeight
        || document.documentElement.clientHeight
        || document.body.clientHeight;
#+END_SRC

该例显示浏览器窗口的高度和宽度：（不包括工具栏/滚动条）

* 其他 Window 方法

一些其他方法：

- window.open() - 打开新窗口
- window.close() - 关闭当前窗口
- window.moveTo() - 移动当前窗口
- window.resizeTo() - 调整当前窗口的尺寸

* JavaScript Window Screen

window.screen 对象包含有关用户屏幕的信息。

* Window Screen

window.screen 对象在编写时可以不使用 window 这个前缀。 一些属性：

- screen.availWidth - 可用的屏幕宽度
- screen.availHeight - 可用的屏幕高度

* Window Screen 可用宽度

screen.availWidth
属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏。

返回您的屏幕的可用宽度：

#+BEGIN_SRC js
    document.write("可用宽度: " + screen.availWidth);
    // 以上代码输出为： 可用宽度: 1680
#+END_SRC

* Window Screen 可用高度

screen.availHeight
属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。

返回您的屏幕的可用高度：

#+BEGIN_SRC js
    document.write("可用高度: " + screen.availHeight);
    以上代码将输出： 可用高度: 1027
#+END_SRC

* JavaScript Window Location

window.location 对象用于获得当前页面的地址
(URL)，并把浏览器重定向到新的页面。

* Window Location

window.location 对象在编写时可不使用 window 这个前缀。 一些例子：

- location.hostname 返回 web 主机的域名
- location.pathname 返回当前页面的路径和文件名
- location.port 返回 web 主机的端口 （80 或 443）
- location.protocol 返回所使用的 web 协议（http:// 或 https://）

* Window Location Href

location.href 属性返回当前页面的 URL。

返回（当前页面的）整个 URL：

#+BEGIN_SRC js
    document.write(location.href);
    // 以上代码输出为：http://www.runoob.com/js/js-window-location.html
#+END_SRC

* Window Location Pathname

location.pathname 属性返回 URL 的路径名。

返回当前 URL 的路径名：

#+BEGIN_SRC js
    document.write(location.pathname);
    // 以上代码输出为：/js/js-window-location.html
#+END_SRC

* Window Location Assign

location.assign() 方法加载新的文档。

加载一个新的文档：

#+BEGIN_SRC js
    window.location.assign("http://www.w3cschool.cc")
#+END_SRC

* JavaScript Window History

window.history 对象包含浏览器的历史。

* Window History

window.history 对象在编写时可不使用 window 这个前缀。
为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。

一些方法：

- history.back() - 与在浏览器点击后退按钮相同
- history.forward() - 与在浏览器中点击向前按钮相同
- Window History Back
- history.back() 方法加载历史列表中的前一个 URL。

这与在浏览器中点击后退按钮是相同的：

在页面上创建后退按钮：

#+BEGIN_SRC js
    window.history.back()
#+END_SRC

* Window History Forward

history forward() 方法加载历史列表中的下一个 URL。
这与在浏览器中点击前进按钮是相同的：

在页面上创建一个向前的按钮：

#+BEGIN_SRC js
    window.history.forward()
#+END_SRC

* JavaScript Window Navigator

window.navigator 对象包含有关访问者浏览器的信息。

* Window Navigator

window.navigator 对象在编写时可不使用 window 这个前缀。

#+BEGIN_EXAMPLE
    <div id="example"></div>
    <script>
    txt = "<p>浏览器代号: " + navigator.appCodeName + "</p>";
    txt+= "<p>浏览器名称: " + navigator.appName + "</p>";
    txt+= "<p>浏览器版本: " + navigator.appVersion + "</p>";
    txt+= "<p>启用 Cookies: " + navigator.cookieEnabled + "</p>";
    txt+= "<p>硬件平台: " + navigator.platform + "</p>";
    txt+= "<p>用户代理: " + navigator.userAgent + "</p>";
    txt+= "<p>用户代理语言: " + navigator.systemLanguage + "</p>";
    document.getElementById("example").innerHTML=txt;
    </script>
#+END_EXAMPLE

*警告!!!* 来自 navigator
对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：

- navigator 数据可被浏览器使用者更改
- 一些浏览器对测试站点会识别错误
- 浏览器无法报告晚于浏览器发布的新操作系统

* 浏览器检测

由于 navigator 可误导浏览器检测，使用对象检测可用来嗅探不同的浏览器。
由于不同的浏览器支持不同的对象，您可以使用对象来检测浏览器。例如，由于只有
Opera 支持属性 "window.opera"，您可以据此识别出 Opera。

例子：=if (window.opera) {...some action...}=

* JavaScript 弹窗

可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。

* 警告框

警告框经常用于确保用户可以得到某些信息。
当警告框出现后，用户需要点击确定按钮才能继续进行操作。window.alert()
方法可以不带上 window 对象，直接使用 alert()方法。

#+BEGIN_SRC js
    window.alert("sometext");
#+END_SRC

* 确认框

确认框通常用于验证是否接受用户操作。 当确认卡弹出时，用户可以点击 "确认"
或者 "取消" 来确定用户操作。 当你点击 "确认", 确认框返回 true， 如果点击
"取消", 确认框返回 false。

* 语法

window.confirm() 方法可以不带上 window 对象，直接使用 confirm()方法。

#+BEGIN_SRC js
    window.confirm("sometext");
#+END_SRC

#+BEGIN_SRC js
    var r=confirm("按下按钮");
    if (r==true)
    {
        x="你按下了\"确定\"按钮!";
    }
    else
    {
        x="你按下了\"取消\"按钮!";
    }
#+END_SRC

* 提示框

提示框经常用于提示用户在进入页面前输入某个值。
当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。
如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为
null。window.prompt() 方法可以不带上 window 对象，直接使用
prompt()方法。

#+BEGIN_SRC js
    window.prompt("sometext","defaultvalue");
#+END_SRC

#+BEGIN_SRC js
    var person=prompt("请输入你的名字","Harry Potter");
    if (person!=null && person!="")
    {
        x="你好 " + person + "! 今天感觉如何?";
        document.getElementById("demo").innerHTML=x;
    }
#+END_SRC

* 换行

弹窗使用 反斜杠 + "n"(\n) 来设置换行。

#+BEGIN_SRC js
    alert("Hello\nHow are you?");
#+END_SRC

* JavaScript 计时事件

JavaScript 一个设定的时间间隔之后来执行代码我们称之为计时事件。

* JavaScript 的计时事件

通过使用
JavaScript，我们有能力做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。
在 JavaScritp 中使用计时事件是很容易的，两个关键方法是:

- setInterval() - 间隔指定的毫秒数不停地执行指定的代码。
- setTimeout() - 在指定的毫秒数后执行指定代码。

注意: setInterval() 和 setTimeout() 是 HTML DOM Window 对象的两个方法。

** setInterval() 方法

setInterval() 间隔指定的毫秒数不停地执行指定的代码 window.setInterval()
方法可以不使用 window 前缀，直接使用函数 setInterval()。

#+BEGIN_SRC js
    window.setInterval("javascript function",milliseconds);
#+END_SRC

setInterval() 第一个参数是函数（function）。 第二个参数间隔的毫秒数。
注意: 1000 毫秒是一秒。 每三秒弹出 "hello" ：

#+BEGIN_SRC js
    setInterval(function(){alert("Hello")},3000);
#+END_SRC

实例展示了如何使用 setInterval()
方法，但是每三秒弹出一次对用户体验并不好。
以下实例将显示当前时间。setInterval()
方法设置每秒钟执行一次代码，就是手表一样。 显示当前时间

#+BEGIN_SRC js
    var myVar=setInterval(function(){myTimer()},1000);

    function myTimer()
    {
        var d=new Date();
        var t=d.toLocaleTimeString();
        document.getElementById("demo").innerHTML=t;
    }
#+END_SRC

** 如何停止执行?

clearInterval() 方法用于停止 setInterval() 方法执行的函数代码。
window.clearInterval() 方法可以不使用 window 前缀，直接使用函数
clearInterval()。

#+BEGIN_SRC js
    window.clearInterval(intervalVariable)
#+END_SRC

要使用 clearInterval() 方法, 在创建计时方法时你必须使用全局变量：

#+BEGIN_SRC js
    myVar=setInterval("javascript function",milliseconds);
    // 然后你可以使用 clearInterval() 方法来停止执行。
#+END_SRC

以下例子,我们添加了 "停止" 按钮：

#+BEGIN_EXAMPLE
    <p id="demo"></p>
    <button onclick="myStopFunction()">停止</button>
    <script>
    var myVar=setInterval(function(){myTimer()},1000);
    function myTimer(){
        var d=new Date();
        var t=d.toLocaleTimeString();
        document.getElementById("demo").innerHTML=t;
    }
    function myStopFunction(){
        clearInterval(myVar);
    }
    </script>
#+END_EXAMPLE

** setTimeout() 方法

#+BEGIN_SRC js
    myVar= window.setTimeout("javascript function", milliseconds);
#+END_SRC

setTimeout() 方法会返回某个值。在上面的语句中，值被储存在名为 myVar
的变量中。假如你希望取消这个
setTimeout()，你可以使用这个变量名来指定它。setTimeout()
的第一个参数是含有 JavaScript 语句的字符串。这个语句可能诸如 "alert('5
seconds!')"，或者对函数的调用，诸如 alertMsg。
第二个参数指示从当前起多少毫秒后执行第一个参数。 提示：1000
毫秒等于一秒。 等待 3 秒，然后弹出 "Hello":

#+BEGIN_SRC js
    setTimeout(function(){alert("Hello")},3000);
#+END_SRC

** 如何停止执行?

clearTimeout() 方法用于停止执行 setTimeout()方法的函数代码。

#+BEGIN_SRC js
    window.clearTimeout(timeoutVariable)
    window.clearTimeout() 方法可以不使用 window 前缀。
#+END_SRC

要使用 clearTimeout() 方法,
你必须在创建超时方法中（setTimeout）使用全局变量:

#+BEGIN_SRC js
    myVar=setTimeout("javascript function",milliseconds);
    // 如果函数还未被执行，你可以使用 clearTimeout() 方法来停止执行函数代码。
#+END_SRC

以下是同一个实例, 但是添加了 "Stop the alert" 按钮:

#+BEGIN_SRC js
    var myVar;

    function myFunction()
    {
        myVar=setTimeout(function(){alert("Hello")},3000);
    }

    function myStopFunction()
    {
        clearTimeout(myVar);
    }
#+END_SRC

* JavaScript Cookie

Cookie 用于存储 web 页面的用户信息。

* 什么是 Cookie？

Cookie 是一些数据, 存储于你电脑上的文本文件中。 当 web
服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。
Cookie 的作用就是用于解决 "如何记录客户端的用户信息": 当用户访问 web
页面时，他的名字可以记录在 cookie 中。 在用户下一次访问该页面时，可以在
cookie 中读取用户访问记录。

Cookie 以名/值对形式存储，如下所示: =username=John Doe=。
当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie
会被添加到该请求中。服务端通过这种方式来获取用户的信息。

* 使用 JavaScript 创建 Cookie

JavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 cookie。
JavaScript 中，创建 cookie 如下所示：

#+BEGIN_SRC js
    document.cookie="username=John Doe";
#+END_SRC

您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT
时间）。默认情况下，cookie 在浏览器关闭时删除：

#+BEGIN_SRC js
    document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT";
#+END_SRC

您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie
属于当前页面。

#+BEGIN_SRC js
    document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/";
#+END_SRC

* 使用 JavaScript 读取 Cookie

在 JavaScript 中, 可以使用以下代码来读取 cookie：

#+BEGIN_SRC js
    var x = document.cookie;
#+END_SRC

document.cookie 将以字符串的方式返回所有的
cookie，类型格式：cookie1=value; cookie2=value; cookie3=value;

* 使用 JavaScript 修改 Cookie

在 JavaScript 中，修改 cookie 类似于创建 cookie，如下所示：

#+BEGIN_SRC js
    document.cookie="username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/";
#+END_SRC

旧的 cookie 将被覆盖。

* 使用 JavaScript 删除 Cookie

删除 cookie 非常简单。您只需要设置 expires
参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:

#+BEGIN_SRC js
    document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 GMT";
#+END_SRC

注意，当您删除时不必指定 cookie 的值。

* Cookie 字符串

document.cookie 属性看起来像一个普通的文本字符串，其实它不是。 即使您在
document.cookie 中写入一个完整的 cookie 字符串, 当您重新读取该 cookie
信息时，cookie 信息是以名/值对的形式展示的。 如果您设置了新的
cookie，旧的 cookie 不会被覆盖。 新 cookie 将添加到 document.cookie
中，所以如果您重新读取 document.cookie，您将获得如下所示的数据：

#+BEGIN_SRC js
    cookie1=value; cookie2=value;
#+END_SRC

如果您需要查找一个指定 cookie 值，您必须创建一个 JavaScript 函数在
cookie 字符串中查找 cookie 值。

* JavaScript Cookie 实例

在以下实例中，我们将创建 cookie 来存储访问者名称。 首先，访问者访问 web
页面, 他将被要求填写自己的名字。该名字会存储在 cookie 中。
访问者下一次访问页面时，他会看到一个欢迎的消息。 在这个实例中我们会创建
3 个 JavaScript 函数:

- 设置 cookie 值的函数
- 获取 cookie 值的函数
- 检测 cookie 值的函数

* 设置 cookie 值的函数

首先，我们创建一个函数用于存储访问者的名字：

#+BEGIN_SRC js
    function setCookie(cname,cvalue,exdays)
    {
      var d = new Date();
      d.setTime(d.getTime()+(exdays*24*60*60*1000));
      var expires = "expires="+d.toGMTString();
      document.cookie = cname + "=" + cvalue + "; " + expires;
    }
#+END_SRC

** 函数解析：

以上的函数参数中，cookie 的名称为 cname，cookie 的值为 cvalue，并设置了
cookie 的过期时间 expires。 该函数设置了 cookie 名、cookie 值、cookie
过期时间。

* 获取 cookie 值的函数

然后，我们创建一个函数用户返回指定 cookie 的值：

#+BEGIN_SRC js
    function getCookie(cname)
    {
      var name = cname + "=";
      var ca = document.cookie.split(';');
      for(var i=0; i<ca.length; i++)
      {
        var c = ca[i].trim();
        if (c.indexOf(name)==0) return c.substring(name.length,c.length);
      }
      return "";
    }
#+END_SRC

** 函数解析：

cookie 名的参数为 cname。 创建一个文本变量用于检索指定 cookie :cname +
"="。 使用分号来分割 document.cookie
字符串，并将分割后的字符串数组赋值给 ca (ca =
document.cookie.split(';'))。 循环 ca 数组
=(i=0;i<ca.length;i++)=，然后读取数组中的每个值，并去除前后空格
=(c=ca[i].trim())=。 如果找到 cookie(c.indexOf(name) == 0)，返回 cookie
的值 (c.substring(name.length,c.length)。 如果没有找到 cookie, 返回 ""。

* 检测 cookie 值的函数

最后，我们可以创建一个检测 cookie 是否创建的函数。 如果设置了
cookie，将显示一个问候信息。 如果没有设置
cookie，将会显示一个弹窗用于询问访问者的名字，并调用 setCookie
函数将访问者的名字存储 365 天：

#+BEGIN_SRC js
    function checkCookie()
    {
      var username=getCookie("username");
      if (username!="")
      {
        alert("Welcome again " + username);
      }
      else
      {
        username = prompt("Please enter your name:","");
        if (username!="" && username!=null)
        {
          setCookie("username",username,365);
        }
      }
    }
#+END_SRC

完整实例

#+BEGIN_SRC js
    function setCookie(cname,cvalue,exdays){
        var d = new Date();
        d.setTime(d.getTime()+(exdays*24*60*60*1000));
        var expires = "expires="+d.toGMTString();
        document.cookie = cname+"="+cvalue+"; "+expires;
    }
    function getCookie(cname){
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for(var i=0; i<ca.length; i++) {
            var c = ca[i].trim();
            if (c.indexOf(name)==0) { return c.substring(name.length,c.length); }
        }
        return "";
    }
    function checkCookie(){
        var user=getCookie("username");
        if (user!=""){
            alert("欢迎 " + user + " 再次访问");
        }
        else {
            user = prompt("请输入你的名字:","");
              if (user!="" && user!=null){
                setCookie("username",user,30);
            }
        }
    }
#+END_SRC

* References

#+BEGIN_QUOTE
  本文是我的学习笔记，内容参考了网上资源，为了方便自己查询使用，做了一些修改整理。
  笔记内容摘录于下列文章，相应权利归属原作者，如有未列出的或有不妥，请联系我立即增补或删除。
#+END_QUOTE

- [[http://www.runoob.com/]]
