+begin_export html
---
layout: post
title: "Ruby 学习"
date: 2018-09-13
categories: 程序设计
tags:
    - Ruby
---
#+end_export

* 数据类型

** 字符串 String

** 字符串拼接

- 可以使用字符串插值 ="#{a} and #{b}"= 或 =String#concat= 或 =<<=、=+=
  运算符。
- 如果不确定变量是否为 =nil=，推荐使用插值的形式，其他方法如果有 =nil=
  值，会报异常。
- 如果明确异常可控，推荐使用 =concat=， =+==
  方法是先复制原字符串后，在复制本字符串尾部追加。
  这种方法会吃掉大量的内存。 而 concat 方法是直接在原字符串尾部追加。

** 符号 Symbol

- 符号可以简单看作没有约束的字符串，符号是整体的，比较的时候只比较一次，不像字符串需要每个字符去比较。
- 符号的命名一般是字母、下划线、数字，数字不能用于首位。

#+BEGIN_EXAMPLE
    symb = :symbol
#+END_EXAMPLE

** 数组 Array

#+BEGIN_EXAMPLE
    arr = [0, 1, 2]
    chs = %w[a b c]
#+END_EXAMPLE

- 数组的索引可以是负数，=-1= 是最后一个数组项。
- =%w= 用于创建元素为字符串的数组。

** 值域 Range

#+BEGIN_EXAMPLE
    val = 0..3
    arr = ('a'..'g').to_a
    av = arr[val]
#+END_EXAMPLE

** 散列 Hash

- 散列（Hash）本质上就是数组，只不过它的索引不局限于只能使用数字。三列的索引几乎可以使用任何对象，一般我们称之为"键值"。
- 调用方法时，如果散列是最后一个参数，可以省略花括号。

#+BEGIN_EXAMPLE
    # 空散列
    user = { }
    # 键为 ":first_name"，值为 "Michael"
    user[:first_name] = 'Michael'

    # 散列的定义
    ha = { 'name' => 'Bob', 'age' => 33 }
    # 符号做键值的时候散列的定义可以使用简洁的语法
    hasym = { name: 'Bob', age: 33}

    # 散列迭代
    hasym.each do |key, value|
      puts "Key #{key.inspect} has value #{value.inspect}"
    end
#+END_EXAMPLE

** 块

#+BEGIN_EXAMPLE
    (1..5).each { |i| puts 2 * i }

    (1..5).each do |i|
      puts 2 * i
    end
#+END_EXAMPLE

** 类

** 具名构造方法

#+BEGIN_EXAMPLE
    Object.new
    String.new
    Array.new
    Range.new(m, n)
    Hash.new
#+END_EXAMPLE

** 类的初始化

#+BEGIN_EXAMPLE
    class User
      attr_accessor :name, :age

      def initialize(args = {})
        @name = args[:name]
        @age  = args[:age]
      end
    end
#+END_EXAMPLE

** 类的继承

- Ruby 的类继承：=String->Object->BasicObject=。
- 类定义里，self 代表的是对象本身。

#+BEGIN_EXAMPLE
    class MyClass < Object
    end
#+END_EXAMPLE

** 修改类

#+BEGIN_EXAMPLE
    class String
      # 回文字符串返回 true
      def palindrome?
        self == self.reverse
      end
    end
#+END_EXAMPLE

* 伪变量

伪变量是特殊的变量，有着局部变量的外观，但行为却像常量。您不能给这些变量赋任何值。

- self : 当前方法的接收器对象。
- true : 代表 true 的值。
- false: 代表 false 的值。
- nil : 代表 undefined 的值。
- *FILE*: 当前源文件的名称。
- *LINE*: 当前行在源文件中的编号。

* 变量作用域

- 常量
  ：以大写字母开头。定义在类或模块内的常量可以从类或模块的内部访问，定义在类或模块外的常量可以被全局访问。常量不能定义在方法内。引用一个未初始化的常量会产生错误。对已经初始化的常量赋值会产生警告。在外部引用常量名需要使用
  =::=。
- 全局变量：以 =$= 为前缀，对整个程序可见。未初始化的值为 =nil=，在使用
  =-w= 选项后，会产生警告。
- 类变量 ：以 =@@=
  为前缀，仅对定义该类变量的类及其子类可见。必须初始化后才能在方法定义中使用。在使用
  =-w= 选项后，重载类变量会产生警告。
- 实例变量：以 =@=
  为前缀，对定义该变量的类的实例及其实例方法可见，但不可以直接被类使用。未初始化的值为
  =nil=，在使用 =-w= 选项后，会产生警告。
- 局部变量：仅在局部代码块中可见，局部变量的作用域从
  =class=、=module=、=def= 或 =do=
  到相对应的结尾或者从左大括号到右大括号。当调用一个未初始化的局部变量时，它被解释为调用一个不带参数的方法。

* module and class

1. module
   比较关注的是功能方面，它把方法收集在一起，组成一个特殊的上下文，通常表示一种能力，比如
   Enumerable。
2. class
   就是我们所理解的经典的类，它可以创建实例对象，包含实例变量和类变量，一般通过对象来与外界交流。

class 和 module 很相似，类只不过是增加强了 module，它比 module
多了三个方法：new()、allocate()和 superclass()。

class 扩展 module 时用的两种方法：include 和
extend，当然它们是有区别的。

- include 包含一个 module 时，把它的实例方法和变量变成了 class
  的实例方法和变量，这样类的祖先链中会出现这个 module。
- extend 扩展一个 module 时，会把它的实例方法作为类方法加入到
  class，并且祖先链里不会出现这个 module。
- 可以通过 =extend self=
  的方式暴露本模块的实例方，多混合时慎用。还可以通过匿名形式
  =extend Module.new { def hello; 'hello'; end}= 的形式处理，避免
  =include= 后的污染。
- module 中定义的静态方法只能通过模块名引用，通过 =extend self=
  暴露的可以被类 =extend=、=include=。
- 通过 =extend=、=include= 引用的模块，不能嵌套引用。
- 通过 =extend= 引用的多个模块，数据独立，相互之间不能互通。
- 通过 =A::B= 的形式定义模块时，左边的 =A= 需要提前定义。

所有的类都继承自 object 类，object 类又继承 basicobject 类，basicobject
它是一个白板类。object 类是 ruby
类和对象默认的根类，它的方法在所有子类中可用，它包含了 kernel 内核。

class 通常都是逻辑完整的，甚至能在现实世界中找到对应物，而对 module
来说却很难是逻辑完整的，因为 module
只能描述一个特殊的上下文，而这个上下文通常无法组成一个完整的对象，需要被找一个宿主，而这个宿主有可能是
class，也有可能是 module。

需要用于做命名空间或用于 mixin 的时候用 module, 其他时候用 class。 当
class 中或多个 class 中有重复代码需要抽象出来时，可以使用 module。

更容易解耦，继承哪个类，只能选一个，但具体要 include 哪几个 module
可以根据不同需求选择不同的 module. 有了 autoload 更加能优化性能。
可以考虑先用 class 去写代码， 当多个 class 的代码逻辑相似的时候，
可以考虑用基类/继承来提取相似的逻辑。当继承无法实现提取的时候，
比如有时候，两个 class 代码逻辑相似， 但是，两个 class 的基类不同，而
ruby 又不支持多继承。 所以，这个时候， 就可以考虑使用 module
来实现，相似代码的提取。

* 单例 singleton

instance 方法定义在 Singleton
这个模块里，运行时将这个模块引入，类就可以访问 Singleton 中的 instance
方法。

#+BEGIN_SRC ruby
    require 'singleton'
    class Logger
      include Singleton

    end
#+END_SRC

* =self= 说明

- =self= 在 =class= 内, 代表当前类。
- =self= 在 =class << self= 内,
  代表当前类，此范围内定义为类方法和类变量。
- =self= 在 =def self.class_method= 内, 代表当前类。
- =self= 在 =def instance_method= 内, 代表当前类的实例。
- =extend self= 在 =module= 内, 模块方法不能直接调用，通过 =extend self=
  让实例方法同时为类方法，可以直接使用模块方法，如果被 =include= 到
  =class= 中，依然还是类的实例方法。

** =self= 和 =@= 使用区别

- 通过 =attr_accessor :val= 定义实例变量，会创建实例变量
  =val=，并在构造函数中对它初始化，同时创建读方法 =val= 和写方法 =val==
  的变量访问器。外部可以直接通过实例对象的变量访问器来访问变量。在类的方法内访问可以使用
  =@val= 访问，也可以使用 =self.val= 访问实例方法。
- 通过 =@=
  定义实例变量，外部不能直接访问，只能通过定义的方法访问。在类的方法内访问需要加
  =@= 符号。
- 类的实例变量不一定先要在构造函数中定义和初始化。
  可以在类的任意方法中定义和使用，使用前也不需要初始化。

** 注意

- 左值不要省略 =self= 或 =@=。
- =self.=
  前缀默认调用方法。没有前缀的同名的变量会以较高的优先级覆盖掉同名的方法，可以通过在方法调用时显式添加括号或者在调用方法前显式添加
  =self= 作为方法接收对象。

* 方法

- 方法后缀感叹号，表示会修改对象的值。

** 方法参数

** 可变参数数组

所有不确定的参数都被作为数组赋值给变量 =args=，=*args=
这种形式的参数，只能在方法定义的参数列表中出现一次。

#+BEGIN_SRC ruby
    def foo(first, *args, last)
      [first, args, last]
    end

    p foo(1, 2, 3, 4, 5)   #=> [1, [2, 3, 4], 5]
#+END_SRC

** 符号散列参数

符号参数在 Ruby 2.0
中定义。可以使用符号将参数名与参数值成对地传给方法内部使用，设置默认值后不用关心参数个数和参数调用顺序。符号参数可以与普通参数搭配使用。

#+BEGIN_SRC ruby
    def foo(arg, x: 0, y: 1, z: 2)
      [arg, x, y, z]
    end
#+END_SRC

** 可变参数符号散列

可以使用 =options = {}= 的形式定义不确定的散列参数，但更推荐采用 Ruby
2.0 中定义的参数使用 =*变量名=
的形式，可以将参数列表以外的关键字参数以散列形式保存。

#+BEGIN_SRC ruby
    def foo(x: 0, y: 1, z: 2, *args)
      [x, y, z, args]
    end

    def bar(x: 0, y: 1, z: 2, options = {})
      [x, y, z, options]
    end

    foo(z: 11, y: 12, x: 13)                  #=> [13, 12, 11, {}]
    foo(z: 11, y: 12, x: 13, a: 1, b: 2)      #=> [13, 12, 11, {:a=>1, :b=>2}]
    bar(z: 11, y: 12, x: 13)                  #=> [13, 12, 11, {}]
    bar(z: 11, y: 12, x: 13, a: 1, b: 2)      #=> [13, 12, 11, {:a=>1, :b=>2}]
#+END_SRC

** 方法调用

** 数组分解为参数

调用方法是，如果以 =*数组=
的形式指定参数，这时传递给方法的不是数组本身，而是数组的各元素被按照顺序传递给方法。但需要注意的是，元素个数必须和方法定义的参数个数一致。

#+BEGIN_SRC ruby
    def foo(a, b, c)
      a + b + c
    end

    args = [2, 3]
    p foo(1, *agrs)   #=> 6
#+END_SRC

** 把散列作为参数传递

散列的字面量是 ={}=，将散列的字面量作为最后一个参数传递给方法时可以省略
={}=。可以表示一组散列参数或其他类型参数，和参数前面有 =*=
双星号定义的区别是定义不明确，可以接收任意参数，而双星号定义的参数明确为散列参数。

#+BEGIN_SRC ruby
    def foo(arg1, arg2)
      [arg1, arg2]
    end

    p foo(100, a: 1, b: 2)   #=> [100, {:a=>1, :b=>2}]
#+END_SRC

* Include、Extend、ClassMethods、Load、Require 的使用区别

** Include

当你 Include 一个模块到某个类时,
相当于把模块中定义的方法插入到类中。它允许使用 mixin。它用来 DRY
你的代码, 避免重复。例如, 当你有多个类时, 需要相同的函数时,
可以把函数定义到 module 中, 进行 include。 下例假设模块 Log 和类
TestClass 在相同的.rb 文件。如果它们存在于多个文件, 则需要使用 load 或
require 导入文件。

#+BEGIN_SRC ruby
    module Log
      def class_type
        "This class is of type: #{self.class}"
      end
    end

    class TestClass
      include Log
    end

    tc = TestClass.new.class_type
    puts tc #This class is of type: TestClass
#+END_SRC

** Extend

当你使用 Extend 来替换 Include 的时候, 在类定义中使用的 extend Log
实际是一种简写，实际运行的是 self.extend(Log)。 并不是说使用 Extend
时就是类方法。而是需要注意到我们实际使用的是一种简写，由于是
self(即类本身) 调用了 Extend
这个方法，才使得添加模块中的方法被设定成了类方法。

所以如果希望避免这一误会，可以在类定义中使用 self.extend(module, ...)
而非 extend(module, ...)。

#+BEGIN_SRC ruby
    module Mod
        def hello
          "Hello from Mod.\n"
        end
    end

    class Klass
      def hello
        "Hello from Klass.\n"
      end
    end

    k = Klass.new
    k.hello         #=> "Hello from Klass.\n"
    k.extend(Mod)   #=> #<Klass:0x401b3bc8>
    k.hello         #=> "Hello from Mod.\n"
#+END_SRC

#+BEGIN_SRC ruby
    module Log
      def class_type
        "This class is of type: #{self.class}"
      end
    end

    class TestClass
      extend Log
      # ...
    end

    TestClass.new.class # => TestClass
    TestClass.class # => Class

    tc = TestClass.class_type
    puts tc  # => This class is of type: Class
#+END_SRC

当你在类中使用 Extend 来代替 Include, 如果你实例化 TestClass 并调用
class_type 方法时，你将会得到 NoMethodError。再一次强调, 使用 Extend
时方法是类方法。

** 混入时回调

- =append_features=在执行 =include= 或 =extend=
  语句时被调用，是真正的混入执行操作，不是回调方法，必须使用 =super=
  来执行混入操作，否则模块不会被混入。
- =included= 的方式在被 =include= 的时候回调。
- =extended= 的方式在被 =extend= 的时候回调。
- =append_features=在 =included= 之前操作。

#+BEGIN_SRC ruby
    module M
      def self.append_features(parent)
        puts "append_features: #{self} is included in #{parent}"
        super
      end

      def self.included(base)
        puts "#{self} is included in #{base}"
      end
    end
#+END_SRC

** ClassMethods

为了将代码更好的模块化，Ruby 的提供了不同类型的混入(include 和
extend)来实现混入类方法和实例方法。但是不管是类的类方法还是实例方法，最终都是模块的实例方法，因此，为了同时实现类方法和实例方法的混入，必须定义两个模块，然后分别
include 和 extend，如下：

#+BEGIN_SRC ruby
    module ClassMethods
    end
    module InstanceMethods
    end
    class Foo
        extend ClassMethods
        include InstanceMethods
    end
#+END_SRC

可能是觉得这种方法将模块的粒度分得太开(模块的划分粒度的确是个经常遇到问题)，因此在
Ruby 中出现了下面一种惯例，将类方法定义在一个子模块中，使用
included()回调，这个子模块常常命名为 ClassMethods。

#+BEGIN_SRC ruby
    module Mod
        def self.included(base)
            base.extend(ClassMothods)
        end
        module ClassMethods
            # 类方法定义
        end
        #实例方法定义
    end
    class Bar
        include Mod
    end
#+END_SRC

上面代码将实现了在 Mod 中同时定义类方法和实例方法。需要注意的是，即使在
ClassMethods 中定义的是类方法，也不能在方法前加
self，否者，该方法会成为模块方法，混入时会被自动忽略了。

当某个对象执行时 =include MyModule=，可以使用
=extend MyModule::ClassMethods=。如果你想要一个
=mixin=，它不仅可以为类的实例添加一些方法，而且可以添加到类本身。

#+BEGIN_SRC ruby
    module M
      def mul
        @x * @y
      end

      module ClassMethods
        def factory(x)
          new(x, 2*x)
        end
      end

      def self.included(base)
        base.extend ClassMethods
      end
    end

    class P
      include M

      def initialize(x, y)
        @x = x
        @y = y
      end

      def sum
        @x + @y
      end
    end

    p1 = P.new(5,15)
    puts "#{p1.sum} #{p1.mul}"
    # => 20 75

    p2=P.factory(10)
    puts "#{p2.sum} #{p2.mul}"
    # => 30 200

    p3=p2.factory(5)
    # => NoMethodError: undefined method `factory' for #<P:0x00007fc5f1fe6820 @x=10, @y=20>
#+END_SRC

可以使用 Rails 的 =ActiveSupport::Concern= 模块来便捷操作

- Concern 中定义的 self.extended()告诉我们，必须通过 extend 混入，而不是
  include；
- 声明类方法的模块的名字为 ClassMethods，如果拼写错误，会直接被忽略；
- Concern 类为每个通过 extend 混入它的类提供了一个 included 类方法(Class
  Macro)，可以传入一个块(Block)，从而实现回调。

#+BEGIN_SRC ruby
    require 'active_support/concern'

    module A
      extend ActiveSupport::Concern
      module ClassMethods
        def method_injected_by_a
          puts 'method_injected_by_a'
        end
      end
    end

    module B
      include A
      extend ActiveSupport::Concern
      included do
        puts 'include callback in B'
      end
    end

    class C
      include B
    end

    C.method_injected_by_a

    # => include callback in B
    # => method_injected_by_a
#+END_SRC

- 没有手动的为模块 A 定义 self.included(base)也实现了将 A::ClassMethods
  混入为 C 类的类方法，代码变干净了；
- 对于仍然有需要 includ 回调的需求，可以直接使用 ActiveSupport::Concern
  中定义的 included 方法来满足；
- 在模块 A 中定义的方法 method_injected_by_a()没有变成模块 B
  的模块方法，而仍然是 C 类的类方法，依赖问题也被解决了。

** Require

Require 方法允许你载入一个库并且会阻止你加载多次。当你使用 require
重复加载同一个 library 时，require 方法 将会返回
false。当你要载入的库在不同的文件时才能使用 require 方法。下例将演示
require 的使用方式。

文件 test_library.rb 和 test_require.rb 在同一个目录下。

#+BEGIN_SRC ruby
    # test_library.rb
    puts " load this libary "
#+END_SRC

#+BEGIN_SRC ruby
    # test_require.rb
    puts (require './test_library')
    puts (require './test_library')
    puts (require './test_library')

    # 结果为
    #  load this libary
    # true
    # false
    # false
#+END_SRC

** Load

Load 方法基本和 require
方法功能一致，但它不会跟踪要导入的库是否已被加载。因此当重复使用 load
方法时，也会载入多次。大部分情况你都会使用 require 来代替
load。但当你需要每次都要加载时候你才会使用 load,
例如模块的状态会频繁地变化, 你会使用 load 进行加载，获取最新的状态。

#+BEGIN_SRC ruby
    puts load "./test_library.rb"  #在这里不能省略 .rb, require 可以省略
    puts load "./test_library.rb"
    puts load "./test_library.rb"

    #结果
    # load this libary
    #true
    # load this libary
    #true
    # load this libary
    #true
#+END_SRC

** 综述

- 模块方法 self.module 在混入的时候仍然被忽略。
- 使用 extend 混入时，模块中的方法成为类的类方法，而使用 include
  混入时，模块中的方法成为类的实例方法。
- 如果同时需要类方法和实例方法，可以使用 =include ClassMethods= 的方式。

* autoload

使用
autoload，只有使用到需要的常量或类文件才被加载。。我们真正需要用某个文件时才加载，而
require 是直接加载，不管你是否会用到。

#+BEGIN_SRC ruby
    autoload(:Bar, 'foo/bar')
#+END_SRC

* map(collect)、each、select、find(detect)、inject、reject

** map（别名函数 collect）

对数组中每个元素进行表达式操作，原始数组不会被改变，返回执行表达式结果的新数组

#+BEGIN_SRC ruby
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map{ |e| e * 3 }
    # => [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]

    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].collect{ |e| e == 3 }
    # =>[false, false, true, false, false, false, false, false, false, false]
#+END_SRC

** each

常用作数组的循环操作，对循环的参数做表达式操作，原数组不会被改变，返回原始数组

#+BEGIN_SRC ruby
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].each{|e| print e.to_s + "###"}
    # => 1###2###3###4###5###6###7###8###9###10###=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#+END_SRC

** select

相当于过滤器，返回符合表达式元素的新数组，如果所有都不符合表达式则返回空数组

#+BEGIN_SRC ruby
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].select{ |e| e == 3 }
    # => [3]

    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].select{ |e| e * 3 }
    # => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#+END_SRC

** find（别名函数 detect）

返回列表中第一个符合条件的元素

#+BEGIN_SRC ruby
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].detect{ |e| e == 3 || e == 2 }
    # =>  2
#+END_SRC

** inject

在所声明的容器中注入符合条件的元素，通常为累加器作用

#+BEGIN_SRC ruby

    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].inject{ |sum, e| sum += e }
    # 其中 sum 为所声明的注入器 将累加后的结果最后注入到 sum 中并返回注入器最后结果

    [1,2,3,4,5,6,7,8,9,10].inject{ |result, elem| result + elem}
    # => 55
    # 此时 inject 没有带参数，这是 result 会为数组中第一个元素，elem 为第二个元素，依次累加返回最后结果

    {1 => 'a', 2 => 'b', 3 =>'c'}.inject({}){ |key, value| value }
    # => [3, "c"]
#+END_SRC

** reject

去除列表中符合条件的元素

#+BEGIN_SRC ruby
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].reject{ |e| e == 2 || e == 8 }
    # => [1, 3, 4, 5, 6, 7, 9, 10]
#+END_SRC

* 符号

** =*= 号的作用

星号有乘和取元素两种含义。

** 1. 有正常的算数功能

- 一个星号表示乘法。
- 两个星号表示指数计算。

#+BEGIN_SRC ruby
    3 * 3   #=> 9
    3 * 3  #=> 27
#+END_SRC

** 2. 数组 * integer

#+BEGIN_SRC ruby
    [1,2 ,[3 , [4 ,5]]] * 2 #=> [1,2 ,[3 , [4 ,5]] , 1,2 ,[3 , [4 ,5]]]
#+END_SRC

** 3. 字符串 * integer

#+BEGIN_SRC ruby
    "hello" * 2   #=> "hellohello"
#+END_SRC

** 4. 创建数组

#+BEGIN_SRC ruby
    *a = 1, 3, "as" #=> [1, 3, "as"]
#+END_SRC

** 5. 可变参数

一个星号表示数组元素迭代，在方法参数定义中可变参数数组。

#+BEGIN_SRC ruby
    def foo(*args)
      p args
    end

    a = [1 , 2]
    foo(1, 2)     #=> [1, 2]
    foo(*a)       #=> [1, 2]
    foo(a)        #=> [[1, 2]]
    foo([1, 2])   #=> [[1, 2]]
#+END_SRC

两个星号表示符号散列元素迭代，在方法参数定义中可变参数符号散列。

#+BEGIN_SRC ruby
    def foo(*args)
      p args
    end

    as = {a: 1, b: 2}
    foo(a: 1, b: 2)    #=> {a: 1, b: 2}
    foo({a: 1, b: 2})  #=> {a: 1, b: 2}
    foo(as)            #=> {a: 1, b: 2}
    foo(*as)          #=> {a: 1, b: 2}
#+END_SRC

注意，只能用于符号关键字散列，不能用于其他类型关键字散列。

#+BEGIN_SRC ruby
    h1 = {a: 'aa', b: 'bb'}
    h2 = {*h1, c: 'cc'}
    # => {a=>'aa', b=>'bb', c=>'cc'}
    h3 = {'a' => 'aa', 'b' => 'bb'}
    h4 = {*h3, 'c' => 'cc'}
    # => TypeError: wrong argument type String (expected Symbol)
#+END_SRC

** =#= 号的作用

=#= 号用来调用一个方法。

** =%= 号的作用

百分号表示法：

- %{String} 用于创建一个使用双引号括起来的字符串
- %Q{String} 用于创建一个使用双引号括起来的字符串
- %q{String} 用于创建一个使用单引号括起来的字符串
- %r{String} 用于创建一个正则表达式字面值
- %w{String}
  用于将一个字符串以空白字符切分成一个字符串数组，进行较少替换
- %W{String}
  用于将一个字符串以空白字符切分成一个字符串数组，进行较多替换
- %s{String} 用于生成一个符号对象
- %x{String} 用于执行 String 所代表的命令

字符串格式化：

- "%05d" % 123 » "00123"
- "%-5s: %08x" % [ "ID", self.id ] » "ID:200e1670"

** =+= 号的作用

=+=
号通常用于数值相加，和字符串连接，但用于字符串连接的时候需要注意，参与连接的字符串为空时会报异常，如果需要可以使用
=#{a}#{b}= 的形式连接字符串。

** ==>= 号的作用

==>= 是 Hash 字面量的键与值的分隔符。

#+BEGIN_SRC ruby
    h1 = {s: 'sss'}
    h2 = {:s => 'sss'}
    h3 = {'s' => 'sss'}
#+END_SRC

** =->= 号的作用

=->= 定义一个 lambda 字面量。

#+BEGIN_SRC ruby
    succ = ->(x){ x+1 }
    succ.call(2)
    # 上述代码与下列代码等同
    succ = lambda { |x| x + 1 }
    succ.call(2)
#+END_SRC

* Tips

** and or not 的优先级

=and or not= 的优先级较低，而 =&& || !=
的优先级是较高的，在使用中如果没有用括号严格界定的话，容易出问题，尤其是
=and return=语句，需要注意。

** =$LOAD_PATH=

- =$LOAD_PATH= 和 =$:= 的含义是一样的，指的是 Ruby
  读取外部文件的一个环境变量。
- =$:.unshift= 增加路径。

#+BEGIN_SRC ruby
    # 装载库路径
    libdir = File.dirname(ENV['HOME'] + '/xhome/repo/app/rubykit/lib/my_kit.rb')
    $:.unshift(libdir) unless $:.include?(libdir) ||
                              $:.include?(File.expand_path(libdir))
#+END_SRC

** 类型判断

- is_a? 判断某个对象是否是某类或其子类的实例。
- kind_of? 是 is_a? 的别名。
- instance_of?
  与上述两个不同，只有当对象是一个明确的类的实例，而不是其子类时才返回
  true。

** ==== =eql?= =equal?= ===== 逻辑判断区别

- ==== ：比较两个对象的值是否相等。
- =eql?= ：比较两个对象的值和类型是否相等。
- =equal?=：比较两个对象是否为同一个对象。

上面三组符号的意义是逻辑比较，字符越长比较越严格。 而下面的 =====
的语意是基于包含、匹配的意思，常用于 =case= 语句。

===== 在通常情况下与 ==== 比较是一样的，但在某些特定情况下有特殊的含义：

- 值域 =Range= 中用于判断等号右值是否在左值的范围内。
- 正则表达式 =RegEx= 中用于判断右值是否为匹配左值。
- 类 =Class= 中用于判断右值是否为左值的实例，等同与 is_a? 方法。
- 符号=Symbol= 中用于判断右值是否与左值相同。

#+BEGIN_SRC ruby
    (1..10) === 5   # true: 5 属于 range 1..10
    /\d+/ === "123" # true: 字符串匹配这个模式
    String === "s"  # true: "s" 是一个字符串类的实例
    s = :s
    :s === s        # true
    :s === "s"      # false
    val = 17
    val.equal?(17)  # true
#+END_SRC

** 魔法注释 =# frozen_string_literal: true=

Ruby
中冻结的对象只会创建一次，以后遇到相同的对象会复用之前创建的对象，这样可以减少对象创建次数和垃圾回收次数。Ruby
中的符号、整数、浮点数默认都是冻结的，字符串字面量目前还不是。

为了提高程序性能，在 Ruby 3 中，字符串字面量在所有文件中默认被冻结。
为了过渡，Ruby2.3 增加了一个魔法注释：

#+BEGIN_SRC ruby
    # frozen_string_literal: true
#+END_SRC

把该注释加在文件的第一行。它告诉
Ruby，文件中的所有字符串字面量都被隐式冻结，不可修改，就像每一个字符串都调用了
freeze 方法一样。

#+BEGIN_SRC ruby
    # frozen_string_literal: true
    s = "string"
    puts s.frozen?      => true
    s << "12"           => can't modify frozen String (RuntimeError)
#+END_SRC

另外，在 Ruby 2.3 中使用 =--enable=frozen-string-literal 标=志运行
ruby，也会默认冻结所有文件中的字符串字面量。在单个文件中可以通过
=# frozen_string_literal: false= 覆盖全局设置（Ruby 3
中也可以用此方式覆盖全局设置）。

#+BEGIN_SRC sh
    ruby --enable=frozen-string-literal t.rb
#+END_SRC

如果想要修改字符串字面量怎么办？
无论全局或每个文件如何设置，可以使用一元+运算符（注意优先级）来产生非冻结字符串或调用
dup 方法来对其进行复制：

#+BEGIN_SRC ruby
    # frozen_string_literal: true
    "".frozen?
    # => true
    (+"").frozen?
    # => false
    "".dup.frozen?
    # => false
#+END_SRC

还可以使用一元-运算符冻结可变（未冻结）字符串。

#+BEGIN_SRC ruby
    (-"").frozen?
    # => true
#+END_SRC

* References

#+BEGIN_QUOTE
  本文是我的学习笔记，内容参考了网上资源，为了方便自己查询使用，做了一些修改整理。
  笔记内容摘录于下列文章，相应权利归属原作者，如有未列出的或有不妥，请联系我立即增补或删除。

- https://ruby-china.org/topics/25706
- http://doudouclever.blog.163.com/blog/static/17511231020110743139240/
- https://ruby-china.org/topics/5096
- http://www.cnblogs.com/limx/p/5747523.html
#+END_QUOTE
