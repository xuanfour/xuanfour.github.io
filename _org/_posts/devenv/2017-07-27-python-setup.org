#+begin_export html
---
layout: post
title: "Python 安装配置"
date: 2017-07-27
categories: 研发环境
tags:
    - Python
    - PyEnv
---
#+end_export

* 安装 pyenv 和 python

  可以用 brew 来安装 pyenv 的最新版本，而且会自动下载依赖包：

  #+begin_src shell
    brew install pyenv
    pyenv -v
    # 查看帮助
    pyenv help
  #+end_src

  #+begin_src shell
    # 添加到 `~/.bash_profile` 或 `~/.zprofile` 文件里
    export PYENV_ROOT=$HOME/.pyenv
    # 添加到 `~/.bashrc` 或 `~/.zshrc` 文件里
    if which pyenv >/dev/null; then eval "$(pyenv init -)"; fi
    # zsh 运行命令使配置生效
    source ~/.zprofile && source ~/.zshrc
    # bash 运行命令使配置生效
    source ~/.bash_profile && source ~/.bashrc
  #+end_src

* 安装 zlib 依赖

  #+begin_src shell
    brew install zlib
    # 如果编译程序有问题，尝试下列操作
    # 1. 增加编译选项设置
    # For compilers to find this software you may need to set:
    #   LDFLAGS:  -L/usr/local/opt/zlib/lib
    #   CPPFLAGS: -I/usr/local/opt/zlib/include
    # For pkg-config to find this software you may need to set:
    #   PKG_CONFIG_PATH: /usr/local/opt/zlib/lib/pkgconfig
    # 2. 将 zlib 的头文件及库文件添加至系统默认的路径
    ln -s /usr/local/opt/zlib/include/* /usr/local/include
    ln -s /usr/local/opt/zlib/lib/* /usr/local/lib
    ln -s /usr/local/opt/zlib/lib/pkgconfig/* /usr/local/lib/pkgconfig
  #+end_src

* pyenv 使用指南

  pyenv versions 查看系统的上安装的 Python 版本。 `*` 表示当前目录正在使用的版本,其中 的 system 表示系统自带的 Python 版本：

  #+begin_src shell
    # 查看本机版本信息
    pyenv versions
    # 显示如下
    # *system (set by /Users/username/.pyenv/version)
    # 安装其他版本的 Python。 例如安装 3.7.0 版本：
    # 显示可以安装的列表
    pyenv install -l
    # 安装 python
    pyenv install 2.7.15
    pyenv install 3.7.0
    # 更新本地数据库
    pyenv rehash
    # 查看本机版本信息
    pyenv versions
  #+end_src

  国内网络环境如果下载不下来的话，可以把显示的下载地址的文件用自己电脑的迅雷下载下来，
  然后传到 `~/.pyenv/cache` 里（cache 文件夹没有的话手动创建一个），
  然后执行 `pyenv install x.x.x` 就可以了。 也可以使用阿里云来加速下载：`vim ~/.pip/pip.conf`

  =内容如下=
  #+begin_src ini
[global]
index-url=http://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host=mirrors.aliyun.com
  #+end_src

* pyenv 的其他操作

  #+begin_src shell
    # 卸载指定的包：
    pyenv uninstall 3.7.0

    # 更改本机版本，重启不会造成再次更改
    # 设置 Global Python 为 2.*, 备注：尽量不要把 Python 3 设置为全局，否则由于 Homebrew 本身有一些应用是依赖于 Python2 的，设置为 Python2 容易出现一些奇怪的问题。
    pyenv global 2.7.15
    # 安装常用包
    pip install -i https://pypi.doubanio.com/simple requests
    # 下面这个是用于安装基本的代码补全功能
    pip install -i https://pypi.doubanio.com/simple --upgrade "jedi>=0.9.0" "json-rpc>=1.8.1" "service_factory>=0.1.5" flake8 pytest autoflake hy

    python version
    #==> Python 2.7.15
    # 仅对当前目录及子目录生效
    #pyenv local system
    #python version
    #==> Python 2.7.10
    #  更改本 shell 的版本，临时生效，优先级高于 global，local 的也高于 global，都是临时生效
    #python shell 3.7.0
  #+end_src

* pyenv 命令

  | 命令                  | 说明                                                         |
  |-----------------------+--------------------------------------------------------------|
  | pyenv version         | 查看当前系统使用的 python 版本                               |
  | pyenv versions        | 查看当前系统拥有的 python 版本                               |
  | pyenv install 3.4.1   | 安装 3.4.1，可使用 -v 参数查看详细输出                       |
  | pyenv uninstall 3.4.1 | 卸载 3.4.1                                                   |
  | pyenv local 3.4.1     | local 仅对当前目录及子目录生效，告诉当前目录使用版本 2.7.5， |
  | pyenv global          | 全局使用某个版本，不建议使用 global 设置全局版本             |
  | pyenv rehash          | 重建环境，增删版本或可执行文件的包（如 pip）后都应执行       |

* pyenv-virtualenv 安装

** 安装 pyenv-virtualenv

   #+begin_src shell
     brew install pyenv-virtualenv
   #+end_src

   修改 `~/bashrc` 或 `~/.zshrc`, 添加以下内容

   #+begin_src shell
     if which pyenv-virtualenv-init >/dev/null; then eval "$(pyenv virtualenv-init -)"; fi
   #+end_src

** 使用 pyenv-virtualenv

   #+begin_src shell
     # 创建虚拟环境
     pyenv virtualenv 2.7.15 env27
     pyenv virtualenv 3.7.0 env37
     # 显示虚拟环境
     pyenv virtualenvs
     # 使用虚拟环境及退出虚拟环境，可能需要重启 shell
     pyenv activate env37

     # 安装常用包
     pip install -i https://pypi.doubanio.com/simple requests
     pip install -i https://pypi.doubanio.com/simple beatutifulsoup4
     pip install -i https://pypi.doubanio.com/simple ipython[notebook]
     pip install -i https://pypi.doubanio.com/simple jupyter
     # 下面这个是用于安装基本的代码补全功能
     pip install -i https://pypi.doubanio.com/simple --upgrade "jedi>=0.9.0" "json-rpc>=1.8.1" "service_factory>=.1.5" flake8 pytest autoflake hy
     # 结束安装包，解除 env37
     pyenv deactivate

     # 如果报错：Failed to activate virtualenv.
     # 可以尝试使用下列命令
     source activate env37
     source deactivate
     # 删除已存在的
     pyenv uninstall env37
   #+end_src
