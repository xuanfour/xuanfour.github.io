#+begin_export html
---
layout: post
title:      "GitFlow 学习"
date:       2015-07-12
categories: 研发环境
tags:
    - Git
    - GitFlow
---
#+end_export

* Git-Flow

Gitflow 工作流程围绕项目发布定义了严格的分支模型。尽管它比 Feature Branch Workflow 更复杂一些，但它也为管理更大规模的项目提供了坚实的框架。

与 Feature Branch Workflow 比起来，Gitflow 流程并没有增加任何新的概念或命令。其特色在于，它为不同的分支分配了非常明确的角色，并且定义了使用场景和用法。除了用于功能开发的分支，它还使用独立的分支进行发布前的准备、记录以及后期维护。当然，你还是能充分利用 Feature Branch Workflow 的好处：拉拽请求（Pull Request）、隔离的试验以及更高效率的合作。

** 工作原理

流程仍然使用一个中央代码仓库，它是所有开发者的信息交流中心。跟其他的工作流程一样，开发者在本地完成开发，然后再将分支代码推送到中央仓库。唯一不同的是项目中分支的结构。

** 安装

   - 你需要有一个可以工作的 git 作为前提。
   - Git flow 可以工作在 OSX, Linux 和 Windows 之下

*** OSX Homebrew:

    #+begin_src shell
      brew install git-flow
    #+end_src

*** OSX Macports:

    #+begin_src shell
      port install git-flow
    #+end_src

*** Linux

    #+begin_src shell
      apt-get install git-flow
    #+end_src

*** Windows (Cygwin)

    安装 git-flow, 你需要 wget 和 util-linux。

    #+begin_src shell
      wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash
    #+end_src

** 开始

   - 为了自定义你的项目，Git flow 需要初始化过程。
   - 使用 git-flow，从初始化一个现有的 git 库内开始。

*** 创建本地新的 dev 分支

    #+begin_src shell
      git branch dev  # 创建本地分支
      git branch  # 查看分支
      # 这是会看到 master 和 dev，而且 master 上会有一个星号
      # 这个时候 dev 是一个本地分支，远程仓库不知道它的存在
      # 本地分支可以不同步到远程仓库，我们可以在 dev 开发，然后 merge 到 master，
      # 使用 master 同步代码，当然也可以同步
    #+end_src

*** 发布 dev 分支

    发布 dev 分支指的是同步 dev 分支的代码到远程服务器

    #+begin_src shell
      git push origin dev:dev  # 这样远程仓库也有一个 dev 分支了
    #+end_src

*** 在 dev 分支开发代码

    #+begin_src shell
      git checkout dev  # 切换到 dev 分支进行开发
      # 开发代码之后，我们有两个选择
      # 第一个：如果功能开发完成了，可以合并主分支
      git checkout master  # 切换到主分支
      git merge dev  # 把 dev 分支的更改和 master 合并
      git push  # 提交主分支代码远程
      git checkout dev  # 切换到 dev 远程分支
      git push  # 提交 dev 分支到远程
      # 第二个：如果功能没有完成，可以直接推送
      git push  # 提交到 dev 远程分支
      # 注意：在分支切换之前最好先 commit 全部的改变，除非你真的知道自己在做什么
    #+end_src

*** 删除分支

    #+begin_src shell
      # 删除远程 dev 分支，危险命令哦
      git push origin --delete <branchName>
      # 可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支
      git push origin :dev
      # 下面两条是删除本地分支
      git checkout master  # 切换到 master 分支
      git branch -d dev  # 删除本地 dev 分支
    #+end_src

** 追踪分支

   追踪分支是用与联系本地分支和远程分支的. 如果你在追踪分支(Tracking Branches)上执行推送(push)或拉取(pull)时,　它会自动推送(push)或拉取(pull)到关联的远程分支上。

   如果你经常要从远程仓库里拉取(pull)分支到本地,并且不想很麻烦的使用 ~git pull~ 这种格式; 那么就应当使用追踪分支(Tracking Branches)。

   ~git clone~ 命令会自动在本地建立一个 master 分支，它是 origin/master 的追踪分支。 而 origin/master 就是被克隆(clone)仓库的'master'分支。

   译者注: origin 一般是指原始仓库地址的别名。

   可以在使用 ~git branch~ 命令时加上 ~--track~ 参数, 来手动创建一个追踪分支。

   #+begin_src shell
     git branch --track experimental origin/experimental
     # 或者
     git checkout --track origin/experimental
   #+end_src

   当你运行下命令时:

   #+begin_src shell
     git pull experimental
   #+end_src

   它会自动从 ~origin~ 抓取(fetch)内容，再把远程的 ~origin/experimental~ 分支合并进(merge)本地的 experimental 分支。

   当要把修改推送(push)到 origin 时, 它会将你本地的 experimental 分支中的修改推送到 origin 的 experimental 分支里,　而无需指定它(origin)。

* References

  #+begin_quote
  本文是我的学习笔记，内容参考了网上资源，为了方便自己查询使用，做了一些修改整理。

  笔记内容摘录于下列文章，相应权利归属原作者，如有未列出的或有不妥，请联系我立即增补或删除。
  - https://www.cnblogs.com/lcngu/p/5770288.html
  - https://github.com/arslanbilal/git-cheat-sheet/blob/master/other-sheets/git-cheat-sheet-zh.md
  #+end_quote
