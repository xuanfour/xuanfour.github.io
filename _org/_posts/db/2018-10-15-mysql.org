#+begin_export html
---
layout: post
title: "MySQL 学习"
date: 2018-10-15
categories: 数据存储
tags:
    - MySQL
excerpt:
keywords: ""
---
#+end_export

* 数据库安装

安装前，我们可以检测系统是否自带安装 MySQL:

#+begin_src shell
rpm -qa | grep mysql
#+end_src

如果你系统有安装，那可以选择进行卸载:

#+begin_src shell
# 普通删除模式
rpm -e mysql
# 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件
# 则用该命令可以对其进行强力删除
rpm -e --nodeps mysql
#+end_src

安装 MySQL：

接下来我们在 Centos7 系统下使用 yum 命令安装 MySQL，需要注意的是 CentOS 7 版本中 MySQL 数据库已从默认的程序列表中移除，所以在安装前我们需要先去官网下载 Yum 资源包，下载地址为：<https://dev.mysql.com/downloads/repo/yum/>。

#+begin_src shell
wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
rpm -ivh mysql-community-release-el7-5.noarch.rpm
yum update
yum install mysql-server
#+end_src

初始化 MySQL：

#+begin_src shell
mysqld --initialize
#+end_src

启动 MySQL：

#+begin_src shell
systemctl start mysqld
#+end_src

查看 MySQL 运行状态：

#+begin_src shell
systemctl status mysqld
#+end_src

验证 MySQL 安装

在成功安装 MySQL 后，一些基础表会表初始化，在服务器启动后，你可以通过简单的测试来验证 MySQL 是否工作正常。

使用 mysqladmin 工具来获取服务器状态：

使用 mysqladmin 命令俩检查服务器的版本, 在 linux 上该二进制文件位于 /usr/bin 目录，在 Windows 上该二进制文件位于 C:\mysql\bin。

#+begin_src shell
mysql --version
mysqladmin --version
#+end_src

使用 MySQL Client(Mysql 客户端) 执行简单的 SQL 命令

你可以在 MySQL Client(Mysql 客户端) 使用 mysql 命令连接到 MySQL 服务器上，默认情况下 MySQL 服务器的登录密码为空，所以本实例不需要输入密码。

命令如下：

#+begin_src shell
mysql
#+end_src

Mysql 安装后需要做的

Mysql 安装成功后，默认的 root 用户密码为空，你可以使用以下命令来创建 root 用户的密码：

#+begin_src shell
[root@host]# mysqladmin -u root password "new_password";
#+end_src

现在你可以通过以下命令来连接到 Mysql 服务器：

#+begin_src shell
mysql -u root -p
#+end_src

* CentOS7 下安装 MySQL 完整示例

#+begin_src shell
# 安装前看是否安装过 mysql，
yum list installed mysql*
# 如果有就用 yum remove 卸载 mysql
# 查看 yum 库下是否有 mysql-server
yum list | grep mysql 或 yum -y list mysql*
# 如果没有（一般在 centos7 下没有）
wget http://repo.mysql.com/mysql80-community-release-el7-1.noarch.rpm
sudo rpm -ivh mysql80-community-release-el7-1.noarch.rpm

# 然后安装 mysql
sudo yum install mysql-server
sudo yum install mysql-devel

# 如果有 mysql-server，则按下面步骤
# 安装 mysql 客户端：
sudo yum install mysql
# 安装 mysql 服务器端：
sudo yum install mysql-server
sudo yum install mysql-devel

# 修改配置
# file: /etc/my.cnf
[mysqld]
character-set-server=utf8mb4

# 然后启动 mysql 服务，可能需要输入 root 密码
service mysqld start
# 登录 mysql
mysql -u root -p
# 刚安装密码为空，直接按回车
# 如果提示权限错误，是第一次启动后生成的随机密码，可使用下列命令查看
grep "temporary password" /var/log/mysqld.log

# 查看数据库：
show databases;
# 如果提示错误
# ===> ERROR 1820 (HY000): You must reset your password
# ===> using ALTER USER statement before executing this statement.
# 可以使用如下两种方式修改密码：
# 1.
SET PASSWORD = PASSWORD(‘12345678’);
# 2.
ALTER USER USER() IDENTIFIED BY ‘12345678’;
# ===> ERROR 1819 (HY000): Your password does not satisfy the current policy requirements
# 出现这个错其实是和 validate_password_policy 的值有关。
# MySQL 完整的初始密码规则可以通过如下命令查看：
use sys;
SHOW VARIABLES LIKE 'validate_password%';
# validate_password_policy 默认是 1，即 MEDIUM，所以刚开始设置的密码必须符合长度，
# 且必须含有数字，小写或大写字母，特殊字符。
# 有时候，只是为了自己测试，不想密码设置得那么复杂，
# 譬如说，我只想设置 root 的密码为 123456。
# 必须修改两个全局参数：
set global validate_password_policy=0;
# 这样，判断密码的标准就基于密码的长度了。
# 这个由 validate_password_length 参数来决定。
# 密码的长度是由 validate_password_length 决定的，
# 而 validate_password_length 的计算公式是：
# validate_password_length = validate_password_number_count +
#     validate_password_special_char_count +
#     (2 * validate_password_mixed_case_count)
# validate_password_number_count 指定了密码中数据的长度
# validate_password_special_char_count 指定了密码中特殊字符的长度
# validate_password_mixed_case_count 指定了密码中大小字母的长度。
set global validate_password_length=1;
# 这些参数，默认值均为 1，所以 validate_password_length 最小值为 4，
# 如果你显性指定 validate_password_length 的值小于 4，
# 尽管不会报错，但 validate_password_length 的值将设为 4。
# 刷新系统并使用新密码测试登录
flush privileges;
mysql -u root -p
# 因为安装了 Yum Repository，以后每次 yum 操作都会自动更新，可以卸载：
sudo yum -y remove mysql80-community-release-el7-1.noarch.rpm
#+end_src

* 启动及关闭 MySQL 服务器

** Windows 系统下

在 Windows 系统下，打开命令窗口(cmd)，进入 MySQL 安装目录的 bin 目录。

启动：

#+begin_src shell
cd c:/mysql/bin
mysqld --console
#+end_src

关闭：

#+begin_src shell
cd c:/mysql/bin
mysqladmin -uroot shutdown
#+end_src

** Linux 系统下

首先，我们需要通过以下命令来检查 MySQL 服务器是否启动：

#+begin_src shell
ps -ef | grep mysqld
#+end_src

如果 MySql 已经启动，以上命令将输出 mysql 进程列表， 如果 mysql 未启动，你可以使用以下命令来启动 mysql 服务器:

#+begin_src shell
./mysqld_safe &
#+end_src

如果你想关闭目前运行的 MySQL 服务器, 你可以执行以下命令:

#+begin_src shell
./mysqladmin -u root -p shutdown
#+end_src

** 打开客户端

#+begin_src shell
mysql -u root -p
#+end_src

* 用户设置

如果你需要添加 MySQL 用户，你只需要在 mysql 数据库中的 user 表添加新用户即可。

以下为添加用户的的实例，用户名为 guest，密码为 guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE 操作权限：

#+begin_src sql
use mysql;
INSERT INTO user (host, user, password, select_priv, insert_priv, update_priv)
           VALUES ('localhost', 'guest', PASSWORD('guest123'), 'Y', 'Y', 'Y');
FLUSH PRIVILEGES;
SELECT host, user, password FROM user WHERE user = 'guest';
#+end_src

在添加用户时，请注意使用 MySQL 提供的 PASSWORD() 函数来对密码进行加密。 你可以在以上实例看到用户密码加密后为：6f8c114b58f2ce9e.

注意：

- 在 MySQL5.7 中 user 表的 password 已换成了 authentication_string。
- password() 加密函数已经在 8.0.11 中移除了，可以使用 MD5() 函数代替。
- 在注意需要执行 FLUSH PRIVILEGES 语句。 这个命令执行后会重新载入授权表。 如果你不使用该命令，你就无法使用新创建的用户来连接 mysql 服务器，除非你重启 mysql 服务器。

#+begin_src sql
use mysql;
INSERT INTO user (host, user, authentication_string, select_priv, insert_priv, update_priv)
           VALUES ('localhost', 'guest', MD5('guest123'), 'Y', 'Y', 'Y');
FLUSH PRIVILEGES;
SELECT host, user, authentication_string FROM user WHERE user = 'guest';
#+end_src

你可以在创建用户时，为用户指定权限，在对应的权限列中，在插入语句中设置为 'Y' 即可，用户权限列表如下：

#+begin_src text
Select_priv
Insert_priv
Update_priv
Delete_priv
Create_priv
Drop_priv
Reload_priv
Shutdown_priv
Process_priv
File_priv
Grant_priv
References_priv
Index_priv
Alter_priv
#+end_src

另外一种添加用户的方法为通过 SQL 的 GRANT 命令，以下命令会给指定数据库 TUTORIALS 添加用户 zara，密码为 zara123。

#+begin_src sql
use mysql;
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -> ON TUTORIALS.*
    -> TO 'zara'@'localhost'
    -> IDENTIFIED BY 'zara123';
#+end_src

以上命令会在 mysql 数据库中的 user 表创建一条用户信息记录。

注意: MySQL 的 SQL 语句以分号 (;) 作为结束标识。

* MySQL 8.0 用户管理

#+begin_src sql
# 创建账号密码
create user `wangwei`@`127.0.0.1` identified by 'passowrd';
# 授予所有权限
grant all on *.* to `wangwei`@`127.0.0.1` with grant option;
# 授予某个数据库所有权限
grant all on databasename.tablename to `wangwei`@`127.0.0.1` with grant option;
# 删除权限
revoke all privileges on databasename.tablename from 'username'@'host';
# 修改密码
alter user 'root'@'localhost' identified with mysql_native_password by '你的密码';
alter user 'mydev'@'localhost' identified by 'MyDev123$';
# 查看用户权限
show grants for 'mydev'@'localhost';
#+end_src

** MySQL 8.0 中带过期时间用户的创建：

#+begin_src sql
CREATE USER `wangwei`@`127.0.0.1` IDENTIFIED BY 'wangwei' PASSWORD EXPIRE INTERVAL 90 DAY;
GRANT ALL ON *.* TO `wangwei`@`127.0.0.1` WITH GRANT OPTION;
#+end_src

** MySQL 8.0 修改用户密码：

*** 密码过期时间管理

要全局建立自动密码到期策略，请使用 default_password_lifetime 系统变量。其默认值为 0，禁用自动密码过期。

如果值 default_password_lifetime 正整数 N，则表示允许的密码生存期，以便密码必须每天更改 N。可以加在配置文件中：

1. 要建立全局策略，密码的使用期限大约为六个月，请在服务器 my.cnf 文件中使用以下行启动服务器：

#+begin_src sql
[mysqld]default_password_lifetime=180
#+end_src

2. 要建立全局策略，以便密码永不过期，请将其设置 default_password_lifetime 为 0：

#+begin_src sql
[mysqld]default_password_lifetime=0
#+end_src

这个参数是可以动态设置并保存的：

#+begin_src sql
SET PERSIST default_password_lifetime = 180;SET PERSIST default_password_lifetime = 0;
#+end_src

创建和修改带有密码过期的用户，帐户特定的到期时间设置示例：

要求每 90 天更换密码：

#+begin_src sql
CREATE USER 'wangwei'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;
ALTER USER 'wangwei'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;
#+end_src

禁用密码过期：

#+begin_src sql
CREATE USER ' wangwei'@'localhost' PASSWORD EXPIRE NEVER;
ALTER USER 'wangwei'@'localhost' PASSWORD EXPIRE NEVER;
#+end_src

遵循全局到期政策：

#+begin_src sql
CREATE USER 'wangwei'@'localhost' PASSWORD EXPIRE DEFAULT;
ALTER USER 'wangwei'@'localhost' PASSWORD EXPIRE DEFAULT;1.3 MySQL 用户密码重用策略设置
#+end_src

MySQL 允许限制重复使用以前的密码。可以根据密码更改次数、已用时间或两者来建立重用限制。帐户的密码历史由过去分配的密码组成。

MySQL 可以限制从此历史记录中选择新密码：

1. 如果根据密码更改次数限制帐户，则无法从指定数量的最新密码中选择新密码。例如，如果密码更改的最小数量设置为 3，则新密码不能与任何最近的 3 个密码相同。

2. 如果帐户因时间的限制而被限制，则无法从历史记录中的新密码中选择新密码，该新密码不会超过指定的天数。例如，如果密码重用间隔设置为 60，则新密码不得在最近 60 天内选择的密码之间。

注意：空密码不记录在密码历史记录中，并随时可以重复使用。

要全局建立密码重用策略，请使用 password_history 和 password_reuse_interval 系统变量。要在服务器启动时指定变量值，请在服务器 my.cnf 文件中定义它们。

示例：

要禁止重复使用最近 6 个密码或密码超过 365 天的任何密码，请将这些行放入您的服务器 my.cnf 文件中：

#+begin_src sql
[mysqld]password_history=6password_reuse_interval=365
#+end_src

要动态设置和保存配置，请使用如下所示的语句：

#+begin_src sql
SET PERSIST password_history = 6;
SET PERSIST password_reuse_interval = 365;
#+end_src

** MySQL8.0 的角色管理

MySQL 角色是指定的权限集合。像用户帐户一样，角色可以拥有授予和撤消的权限。

可以授予用户帐户角色，授予该帐户与每个角色相关的权限。用户被授予角色权限，则该用户拥有该角色的权限。

以下列表总结了 MySQL 提供的角色管理功能：

- CREATE ROLE 并 DROP ROLE 角色创建和删除；
- GRANT 并 REVOKE 为用户和角色分配和撤销权限；
- SHOW GRANTS 显示用户和角色的权限和角色分配；
- SET DEFAULT ROLE 指定哪些帐户角色默认处于活动状态；
- SET ROLE 更改当前会话中的活动角色。
- CURRENT_ROLE()功能显示当前会话中的活动角色。

*** 创建角色并授予用户角色权限

考虑如下几种场景：

- 应用程序使用名为 app_db 的数据库 。
- 与应用程序相关联，可以为创建和维护应用程序的开发人员以及管理员账户。
- 开发人员需要完全访问数据库。有的用户只需要读取权限，有的用户需要读取/写入权限。
- 为清楚区分角色的权限，将角色创建为所需权限集的名称。通过授权适当的角色，可以轻松地为用户帐户授予所需的权限。

要创建角色，请使用 CREATE ROLE：

#+begin_src sql
CREATE ROLE 'app_developer', 'app_read', 'app_write';
#+end_src

角色名称与用户帐户名称非常相似，由格式中的用户部分和主机部分组成。主机部分，如果省略，则默认为%。用户和主机部分可以不加引号，除非它们包含特殊字符。与帐户名称不同，角色名称的用户部分不能为空。为角色分配权限，使用与为用户分配权限相同的语法执行：

#+begin_src sql
GRANT ALL ON app_db.* TO 'app_developer';
GRANT SELECT ON app_db.* TO 'app_read';
GRANT INSERT, UPDATE, DELETE ON app_db.* TO 'app_write';
CREATE ROLE 'app_developer', 'app_read', 'app_write';
#+end_src

现在假设您最初需要一个开发人员帐户，两个需要只读访问权的用户以及一个需要读取/写入权限的用户。

使用 CREATEUSER 创建用户：

#+begin_src sql
CREATE USER 'dev1'@'localhost' IDENTIFIED BY 'dev1pass';
CREATE USER 'read_user1'@'localhost' IDENTIFIED BY 'read_user1pass';
CREATE USER 'read_user2'@'localhost' IDENTIFIED BY 'read_user2pass';
CREATE USER 'rw_user1'@'localhost' IDENTIFIED BY 'rw_user1pass';
#+end_src

要为每个用户分配其所需的权限，可以使用 GRANT 与刚才显示的形式相同的语句，但这需要列举每个用户的个人权限。

相反，使用 GRANT 允许授权角色而非权限的替代语法：

#+begin_src sql
GRANT 'app_developer' TO 'dev1'@'localhost';
GRANT 'app_read' TO 'read_user1'@'localhost', 'read_user2'@'localhost';
GRANT 'app_read', 'app_write' TO 'rw_user1'@'localhost';
#+end_src

结合角色所需的读取和写入权限，在 GRANT 中授权 rw_user1 用户读取和写入的角色。

在 GRANT 授权角色的语法和授权用户的语法不同：有一个 ON 来区分角色和用户的授权，有 ON 的为用户授权，而没有 ON 用来分配角色。

由于语法不同，因此不能在同一语句中混合分配用户权限和角色。（允许为用户分配权限和角色，但必须使用单独的 GRANT 语句，每种语句的语法都要与授权的内容相匹配。）

*** 检查角色权限

要验证分配给用户的权限，使用 SHOW GRANTS。例如：

#+begin_src sql
SHOW GRANTS FOR 'dev1'@'localhost';
#+end_src

但是，它会显示每个授予的角色，而不会将其显示为角色所代表的权限。如果要显示角色权限，添加一个 USING 来显示：

#+begin_src sql
SHOW GRANTS FOR 'dev1'@'localhost' USING 'app_developer';
#+end_src

同样验证其他类型的用户：

#+begin_src sql
SHOW GRANTS FOR 'read_user1'@'localhost' USING 'app_read';
#+end_src

撤消角色或角色权限

正如可以授权某个用户的角色一样，可以从帐户中撤销这些角色：

#+begin_src sql
REVOKE role FROM user;
#+end_src

REVOKE 可以用于角色修改角色权限。这不仅影响角色本身权限，还影响任何授予该角色的用户权限。假设想临时让所有用户只读，使用 REVOKE 从该 app_write 角色中撤消修改权限 ：

#+begin_src sql
REVOKE INSERT, UPDATE, DELETE ON app_db.* FROM 'app_write';
#+end_src

碰巧，某个角色完全没有任何权限，正如可以看到的那样 SHOW GRANTS（这个语句可以和角色一起使用，而不仅仅是查询用户权限可用）：

#+begin_src sql
SHOW GRANTS FOR 'app_write';
#+end_src

从角色中撤销权限会影响到该角色中任何用户的权限，因此 rw_user1 现在已经没有表修改权限（INSERT，UPDATE，和 DELETE 权限已经没有了）：

#+begin_src sql
SHOW GRANTS FOR 'rw_user1'@'localhost' USING 'app_read', 'app_write';
#+end_src


实际上，rw_user1 读/写用户已成为只读用户。对于被授予 app_write 角色的任何其他用户也会发生这种情况，说明修改使用角色而不必修改个人帐户的权限。

要恢复角色的修改权限，只需重新授予它们即可：

#+begin_src sql
GRANT INSERT, UPDATE, DELETE ON app_db.* TO 'app_write';
#+end_src

现在 rw_user1 再次具有修改权限，就像授权该 app_write 角色的其他任何帐户一样。

删除角色

要删除角色，请使用 DROP ROLE：

#+begin_src sql
DROP ROLE 'app_read', 'app_write';
#+end_src

删除角色会从授权它的每个帐户中撤消该角色。

角色和用户在实际中的应用

假设遗留应用开发项目在 MySQL 中的角色出现之前开始，因此与该项目相关联的所有用户都是直接授予权限（而不是授予角色权限）。其中一个帐户是最初被授予权限的开发者用户，如下所示：

#+begin_src sql
CREATE USER 'old_app_dev'@'localhost' IDENTIFIED BY 'old_app_devpass';
GRANT ALL ON old_app.* TO 'old_app_dev'@'localhost';
#+end_src

如果此开发人员离开项目，则有必要将权限分配给其他用户，或者项目参与人增多，则可能需要多个用户。以下是解决该问题的一些方法：

不使用角色：更改帐户密码，以便原始开发人员不能使用它，并让新的开发人员使用该帐户：

#+begin_src sql
ALTER USER 'old_app_dev'@'localhost' IDENTIFIED BY 'new_password';
#+end_src

使用角色：锁定帐户以防止任何人使用它来连接服务器：

#+begin_src sql
ALTER USER 'old_app_dev'@'localhost' ACCOUNT LOCK;
#+end_src

然后将该帐户视为角色。对于每个新开发项目的开发者，创建一个新帐户并授予其原始开发者帐户：

CREATE USER 'new_app_dev1'@'localhost' IDENTIFIED BY 'new_password';
GRANT 'old_app_dev'@'localhost' TO 'new_app_dev1'@'localhost';

其效果是将原始开发者帐户权限分配给新帐户。

MySQL8.0 的用户和角色管理也越来越像 Oracle 了，8.0 中有不少新的特性，变化还是很大的，需要 DBA 不断的学习和测试，更新对 MySQL 新版的认知，更好地运维 MySQL 数据库。未来 MySQL 数据库自治和智能数据库是必然发展趋势，对 DBA 来说是解放，也是挑战。

* /etc/my.cnf 文件配置

一般情况下，你不需要修改该配置文件，该文件默认配置如下：

#+end_src ini
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

[mysql.server]
user=mysql
basedir=/var/lib

[safe_mysqld]
err-log=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
#+end_src

在配置文件中，你可以指定不同的错误日志文件存放的目录，一般你不需要改动这些配置。

* MySQL 常见命令

以下列出了使用 Mysql 数据库过程中常用的命令：

#+begin_src sql
USE 数据库名 :
# 选择要操作的 Mysql 数据库，使用该命令后所有 Mysql 命令都只针对该数据库。
SHOW DATABASES:
# 列出 MySQL 数据库管理系统的数据库列表。
SHOW TABLES:
# 显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。
SHOW COLUMNS FROM 数据表:
# 显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。
SHOW INDEX FROM 数据表:
# 显示数据表的详细索引信息，包括 PRIMARY KEY（主键）。
SHOW TABLE STATUS LIKE [FROM db_name] [LIKE 'pattern'] \G:
# 该命令将输出 Mysql 数据库管理系统的性能及统计信息。
#+end_src

数据库 CRUD

#+begin_src sql
# 显示数据库
show databases;
# 选择数据库
use dbname;
# 创建数据库
crate database dbname;
# 创建数据库
drop database dbname;
#+end_src

* References

> 本文是我的学习笔记，内容参考了网上资源，为了方便自己查询使用，做了一些修改整理。
> 笔记内容摘录于下列文章，相应权利归属原作者，如有未列出的或有不妥，请联系我立即增补或删除。

- <http://www.runoob.com/mysql/mysql-tutorial.html>
- <https://www.sohu.com/a/229885311_610509>
